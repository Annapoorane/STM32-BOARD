
SPI_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027bc  080027bc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080027bc  080027bc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027bc  080027bc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080027c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000014  080027d8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080027d8  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d40  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001447  00000000  00000000  00027d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  000291d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  000298f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4c1  00000000  00000000  00029f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000796f  00000000  00000000  00049429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bde4c  00000000  00000000  00050d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ebe4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ba8  00000000  00000000  0010ec38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002764 	.word	0x08002764

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	08002764 	.word	0x08002764

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa12 	bl	80005fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f847 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8c9 	bl	8000370 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001de:	f000 f889 	bl	80002f4 <MX_SPI1_Init>
  {
    /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  //Transmit data
	  HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, txbuf, 5, HAL_MAX_DELAY);
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295
 80001e6:	2205      	movs	r2, #5
 80001e8:	491b      	ldr	r1, [pc, #108]	; (8000258 <main+0x8c>)
 80001ea:	481c      	ldr	r0, [pc, #112]	; (800025c <main+0x90>)
 80001ec:	f001 fc25 	bl	8001a3a <HAL_SPI_Transmit>
 80001f0:	4603      	mov	r3, r0
 80001f2:	71fb      	strb	r3, [r7, #7]
	  if(status != HAL_OK) {
		  // Handle error
	  }

	  //Receive data
	  status = HAL_SPI_Receive(&hspi1, rxbuf , 5, HAL_MAX_DELAY);
 80001f4:	f04f 33ff 	mov.w	r3, #4294967295
 80001f8:	2205      	movs	r2, #5
 80001fa:	4919      	ldr	r1, [pc, #100]	; (8000260 <main+0x94>)
 80001fc:	4817      	ldr	r0, [pc, #92]	; (800025c <main+0x90>)
 80001fe:	f001 fd8a 	bl	8001d16 <HAL_SPI_Receive>
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	  if(status != HAL_OK) {
		  // Handle error
	  }

	  //Transmit and receive data simultaneously
	  status = HAL_SPI_TransmitReceive(&hspi1, txbuf, rxbuf, 10,HAL_MAX_DELAY);
 8000206:	f04f 33ff 	mov.w	r3, #4294967295
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	230a      	movs	r3, #10
 800020e:	4a14      	ldr	r2, [pc, #80]	; (8000260 <main+0x94>)
 8000210:	4911      	ldr	r1, [pc, #68]	; (8000258 <main+0x8c>)
 8000212:	4812      	ldr	r0, [pc, #72]	; (800025c <main+0x90>)
 8000214:	f001 feaf 	bl	8001f76 <HAL_SPI_TransmitReceive>
 8000218:	4603      	mov	r3, r0
 800021a:	71fb      	strb	r3, [r7, #7]
	  if(status != HAL_OK) {
		  // Handle error
	  }

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800021c:	2102      	movs	r1, #2
 800021e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000222:	f000 fcfb 	bl	8000c1c <HAL_GPIO_TogglePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <main+0x98>)
 800022e:	f000 fcdd 	bl	8000bec <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, txbuf, rxbuf, 10, 200);
 8000232:	23c8      	movs	r3, #200	; 0xc8
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	230a      	movs	r3, #10
 8000238:	4a09      	ldr	r2, [pc, #36]	; (8000260 <main+0x94>)
 800023a:	4907      	ldr	r1, [pc, #28]	; (8000258 <main+0x8c>)
 800023c:	4807      	ldr	r0, [pc, #28]	; (800025c <main+0x90>)
 800023e:	f001 fe9a 	bl	8001f76 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000248:	4806      	ldr	r0, [pc, #24]	; (8000264 <main+0x98>)
 800024a:	f000 fccf 	bl	8000bec <HAL_GPIO_WritePin>

	  HAL_Delay(500);
 800024e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000252:	f000 fa47 	bl	80006e4 <HAL_Delay>
  {
 8000256:	e7c4      	b.n	80001e2 <main+0x16>
 8000258:	20000000 	.word	0x20000000
 800025c:	20000038 	.word	0x20000038
 8000260:	20000030 	.word	0x20000030
 8000264:	48000400 	.word	0x48000400

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b096      	sub	sp, #88	; 0x58
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0314 	add.w	r3, r7, #20
 8000272:	2244      	movs	r2, #68	; 0x44
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f002 fa6c 	bl	8002754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	463b      	mov	r3, r7
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800028a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800028e:	f000 fced 	bl	8000c6c <HAL_PWREx_ControlVoltageScaling>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000298:	f000 f8be 	bl	8000418 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800029c:	2310      	movs	r3, #16
 800029e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a8:	2360      	movs	r3, #96	; 0x60
 80002aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ac:	2300      	movs	r3, #0
 80002ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fd2f 	bl	8000d18 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002c0:	f000 f8aa 	bl	8000418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002c8:	2300      	movs	r3, #0
 80002ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 f93b 	bl	8001558 <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002e8:	f000 f896 	bl	8000418 <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3758      	adds	r7, #88	; 0x58
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_SPI1_Init+0x74>)
 80002fa:	4a1c      	ldr	r2, [pc, #112]	; (800036c <MX_SPI1_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_SPI1_Init+0x74>)
 8000300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_SPI1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <MX_SPI1_Init+0x74>)
 800030e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000312:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_SPI1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_SPI1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_SPI1_Init+0x74>)
 8000322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000326:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_SPI1_Init+0x74>)
 800032a:	2220      	movs	r2, #32
 800032c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_SPI1_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_SPI1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_SPI1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_SPI1_Init+0x74>)
 8000342:	2207      	movs	r2, #7
 8000344:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_SPI1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_SPI1_Init+0x74>)
 800034e:	2208      	movs	r2, #8
 8000350:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_SPI1_Init+0x74>)
 8000354:	f001 face 	bl	80018f4 <HAL_SPI_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800035e:	f000 f85b 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000038 	.word	0x20000038
 800036c:	40013000 	.word	0x40013000

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b22      	ldr	r3, [pc, #136]	; (8000410 <MX_GPIO_Init+0xa0>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	4a21      	ldr	r2, [pc, #132]	; (8000410 <MX_GPIO_Init+0xa0>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000392:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <MX_GPIO_Init+0xa0>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <MX_GPIO_Init+0xa0>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	4a1b      	ldr	r2, [pc, #108]	; (8000410 <MX_GPIO_Init+0xa0>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003aa:	4b19      	ldr	r3, [pc, #100]	; (8000410 <MX_GPIO_Init+0xa0>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2102      	movs	r1, #2
 80003ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003be:	f000 fc15 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2101      	movs	r1, #1
 80003c6:	4813      	ldr	r0, [pc, #76]	; (8000414 <MX_GPIO_Init+0xa4>)
 80003c8:	f000 fc10 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003cc:	2302      	movs	r3, #2
 80003ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	f107 030c 	add.w	r3, r7, #12
 80003e0:	4619      	mov	r1, r3
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f000 fa87 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003ea:	2301      	movs	r3, #1
 80003ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	4619      	mov	r1, r3
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_GPIO_Init+0xa4>)
 8000402:	f000 fa79 	bl	80008f8 <HAL_GPIO_Init>

}
 8000406:	bf00      	nop
 8000408:	3720      	adds	r7, #32
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	48000400 	.word	0x48000400

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x44>)
 800042c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6613      	str	r3, [r2, #96]	; 0x60
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x44>)
 8000438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_MspInit+0x44>)
 8000444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <HAL_MspInit+0x44>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	6593      	str	r3, [r2, #88]	; 0x58
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_MspInit+0x44>)
 8000450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <HAL_SPI_MspInit+0x7c>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d128      	bne.n	80004e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <HAL_SPI_MspInit+0x80>)
 8000490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <HAL_SPI_MspInit+0x80>)
 8000494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000498:	6613      	str	r3, [r2, #96]	; 0x60
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <HAL_SPI_MspInit+0x80>)
 800049c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800049e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <HAL_SPI_MspInit+0x80>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4a10      	ldr	r2, [pc, #64]	; (80004ec <HAL_SPI_MspInit+0x80>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <HAL_SPI_MspInit+0x80>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004be:	23e0      	movs	r3, #224	; 0xe0
 80004c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004ce:	2305      	movs	r3, #5
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004dc:	f000 fa0c 	bl	80008f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004e0:	bf00      	nop
 80004e2:	3728      	adds	r7, #40	; 0x28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40013000 	.word	0x40013000
 80004ec:	40021000 	.word	0x40021000

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler+0x4>

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler+0x4>

08000502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler+0x4>

0800050e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053c:	f000 f8b2 	bl	80006a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <SystemInit+0x5c>)
 800054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054e:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <SystemInit+0x5c>)
 8000550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <SystemInit+0x60>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <SystemInit+0x60>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <SystemInit+0x60>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <SystemInit+0x60>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <SystemInit+0x60>)
 8000570:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000574:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000578:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <SystemInit+0x60>)
 800057c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000580:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <SystemInit+0x60>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <SystemInit+0x60>)
 8000588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800058c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <SystemInit+0x60>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00
 80005a4:	40021000 	.word	0x40021000

080005a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ac:	f7ff ffca 	bl	8000544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005b2:	e003      	b.n	80005bc <LoopCopyDataInit>

080005b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005ba:	3104      	adds	r1, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80005c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005c4:	d3f6      	bcc.n	80005b4 <CopyDataInit>
	ldr	r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005c8:	e002      	b.n	80005d0 <LoopFillZerobss>

080005ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005cc:	f842 3b04 	str.w	r3, [r2], #4

080005d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <LoopForever+0x16>)
	cmp	r2, r3
 80005d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005d4:	d3f9      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d6:	f002 f899 	bl	800270c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005da:	f7ff fdf7 	bl	80001cc <main>

080005de <LoopForever>:

LoopForever:
    b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005e0:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80005e4:	080027c4 	.word	0x080027c4
	ldr	r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005ec:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80005f0:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80005f4:	200000a0 	.word	0x200000a0

080005f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_IRQHandler>

080005fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f943 	bl	8000890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800060a:	200f      	movs	r0, #15
 800060c:	f000 f80e 	bl	800062c <HAL_InitTick>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	e001      	b.n	8000620 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800061c:	f7ff ff02 	bl	8000424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000620:	79fb      	ldrb	r3, [r7, #7]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <HAL_InitTick+0x6c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d023      	beq.n	8000688 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <HAL_InitTick+0x70>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_InitTick+0x6c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000652:	fbb2 f3f3 	udiv	r3, r2, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f941 	bl	80008de <HAL_SYSTICK_Config>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d10f      	bne.n	8000682 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d809      	bhi.n	800067c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 f919 	bl	80008a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <HAL_InitTick+0x74>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e007      	b.n	800068c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e004      	b.n	800068c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	e001      	b.n	800068c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000688:	2301      	movs	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800068c:	7bfb      	ldrb	r3, [r7, #15]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000010 	.word	0x20000010
 800069c:	20000008 	.word	0x20000008
 80006a0:	2000000c 	.word	0x2000000c

080006a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_IncTick+0x20>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_IncTick+0x24>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_IncTick+0x24>)
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000010 	.word	0x20000010
 80006c8:	2000009c 	.word	0x2000009c

080006cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return uwTick;
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <HAL_GetTick+0x14>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	2000009c 	.word	0x2000009c

080006e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ec:	f7ff ffee 	bl	80006cc <HAL_GetTick>
 80006f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006fc:	d005      	beq.n	800070a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_Delay+0x44>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800070a:	bf00      	nop
 800070c:	f7ff ffde 	bl	80006cc <HAL_GetTick>
 8000710:	4602      	mov	r2, r0
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	429a      	cmp	r2, r3
 800071a:	d8f7      	bhi.n	800070c <HAL_Delay+0x28>
  {
  }
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000010 	.word	0x20000010

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	60d3      	str	r3, [r2, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db0a      	blt.n	80007ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	490c      	ldr	r1, [pc, #48]	; (80007dc <__NVIC_SetPriority+0x4c>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	440b      	add	r3, r1
 80007b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b8:	e00a      	b.n	80007d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <__NVIC_SetPriority+0x50>)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	3b04      	subs	r3, #4
 80007c8:	0112      	lsls	r2, r2, #4
 80007ca:	b2d2      	uxtb	r2, r2
 80007cc:	440b      	add	r3, r1
 80007ce:	761a      	strb	r2, [r3, #24]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000e100 	.word	0xe000e100
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b089      	sub	sp, #36	; 0x24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	f1c3 0307 	rsb	r3, r3, #7
 80007fe:	2b04      	cmp	r3, #4
 8000800:	bf28      	it	cs
 8000802:	2304      	movcs	r3, #4
 8000804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3304      	adds	r3, #4
 800080a:	2b06      	cmp	r3, #6
 800080c:	d902      	bls.n	8000814 <NVIC_EncodePriority+0x30>
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3b03      	subs	r3, #3
 8000812:	e000      	b.n	8000816 <NVIC_EncodePriority+0x32>
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	f04f 32ff 	mov.w	r2, #4294967295
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43da      	mvns	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	401a      	ands	r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800082c:	f04f 31ff 	mov.w	r1, #4294967295
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	43d9      	mvns	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	4313      	orrs	r3, r2
         );
}
 800083e:	4618      	mov	r0, r3
 8000840:	3724      	adds	r7, #36	; 0x24
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800085c:	d301      	bcc.n	8000862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085e:	2301      	movs	r3, #1
 8000860:	e00f      	b.n	8000882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <SysTick_Config+0x40>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086a:	210f      	movs	r1, #15
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	f7ff ff8e 	bl	8000790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <SysTick_Config+0x40>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <SysTick_Config+0x40>)
 800087c:	2207      	movs	r2, #7
 800087e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	e000e010 	.word	0xe000e010

08000890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff47 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008b8:	f7ff ff5c 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68b9      	ldr	r1, [r7, #8]
 80008c2:	6978      	ldr	r0, [r7, #20]
 80008c4:	f7ff ff8e 	bl	80007e4 <NVIC_EncodePriority>
 80008c8:	4602      	mov	r2, r0
 80008ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff5d 	bl	8000790 <__NVIC_SetPriority>
}
 80008d6:	bf00      	nop
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffb0 	bl	800084c <SysTick_Config>
 80008ec:	4603      	mov	r3, r0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e154      	b.n	8000bb2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	2101      	movs	r1, #1
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	f000 8146 	beq.w	8000bac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d00b      	beq.n	8000940 <HAL_GPIO_Init+0x48>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d007      	beq.n	8000940 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000934:	2b11      	cmp	r3, #17
 8000936:	d003      	beq.n	8000940 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b12      	cmp	r3, #18
 800093e:	d130      	bne.n	80009a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2203      	movs	r2, #3
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000976:	2201      	movs	r2, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	f003 0201 	and.w	r2, r3, #1
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0xea>
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b12      	cmp	r3, #18
 80009e0:	d123      	bne.n	8000a2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	08da      	lsrs	r2, r3, #3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3208      	adds	r2, #8
 80009ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	220f      	movs	r2, #15
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	691a      	ldr	r2, [r3, #16]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f003 0307 	and.w	r3, r3, #7
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	08da      	lsrs	r2, r3, #3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3208      	adds	r2, #8
 8000a24:	6939      	ldr	r1, [r7, #16]
 8000a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2203      	movs	r2, #3
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 0203 	and.w	r2, r3, #3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f000 80a0 	beq.w	8000bac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6c:	4b58      	ldr	r3, [pc, #352]	; (8000bd0 <HAL_GPIO_Init+0x2d8>)
 8000a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a70:	4a57      	ldr	r2, [pc, #348]	; (8000bd0 <HAL_GPIO_Init+0x2d8>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6613      	str	r3, [r2, #96]	; 0x60
 8000a78:	4b55      	ldr	r3, [pc, #340]	; (8000bd0 <HAL_GPIO_Init+0x2d8>)
 8000a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a84:	4a53      	ldr	r2, [pc, #332]	; (8000bd4 <HAL_GPIO_Init+0x2dc>)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aae:	d019      	beq.n	8000ae4 <HAL_GPIO_Init+0x1ec>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a49      	ldr	r2, [pc, #292]	; (8000bd8 <HAL_GPIO_Init+0x2e0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d013      	beq.n	8000ae0 <HAL_GPIO_Init+0x1e8>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a48      	ldr	r2, [pc, #288]	; (8000bdc <HAL_GPIO_Init+0x2e4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d00d      	beq.n	8000adc <HAL_GPIO_Init+0x1e4>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a47      	ldr	r2, [pc, #284]	; (8000be0 <HAL_GPIO_Init+0x2e8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d007      	beq.n	8000ad8 <HAL_GPIO_Init+0x1e0>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a46      	ldr	r2, [pc, #280]	; (8000be4 <HAL_GPIO_Init+0x2ec>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d101      	bne.n	8000ad4 <HAL_GPIO_Init+0x1dc>
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	e008      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	e006      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e004      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000adc:	2302      	movs	r3, #2
 8000ade:	e002      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	f002 0203 	and.w	r2, r2, #3
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	4093      	lsls	r3, r2
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000af6:	4937      	ldr	r1, [pc, #220]	; (8000bd4 <HAL_GPIO_Init+0x2dc>)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3302      	adds	r3, #2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b04:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <HAL_GPIO_Init+0x2f0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b28:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <HAL_GPIO_Init+0x2f0>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <HAL_GPIO_Init+0x2f0>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b52:	4a25      	ldr	r2, [pc, #148]	; (8000be8 <HAL_GPIO_Init+0x2f0>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_GPIO_Init+0x2f0>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_GPIO_Init+0x2f0>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_GPIO_Init+0x2f0>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_GPIO_Init+0x2f0>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f47f aea3 	bne.w	8000908 <HAL_GPIO_Init+0x10>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	371c      	adds	r7, #28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	48000800 	.word	0x48000800
 8000be0:	48000c00 	.word	0x48000c00
 8000be4:	48001000 	.word	0x48001000
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c08:	e002      	b.n	8000c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c2e:	887a      	ldrh	r2, [r7, #2]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4013      	ands	r3, r2
 8000c34:	041a      	lsls	r2, r3, #16
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43d9      	mvns	r1, r3
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	619a      	str	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40007000 	.word	0x40007000

08000c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c7a:	d130      	bne.n	8000cde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c88:	d038      	beq.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c92:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2232      	movs	r2, #50	; 0x32
 8000ca0:	fb02 f303 	mul.w	r3, r2, r3
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8000caa:	0c9b      	lsrs	r3, r3, #18
 8000cac:	3301      	adds	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cb0:	e002      	b.n	8000cb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc4:	d102      	bne.n	8000ccc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f2      	bne.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd8:	d110      	bne.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e00f      	b.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cea:	d007      	beq.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cf4:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40007000 	.word	0x40007000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	431bde83 	.word	0x431bde83

08000d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f000 bc11 	b.w	800154e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d2c:	4ba0      	ldr	r3, [pc, #640]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d36:	4b9e      	ldr	r3, [pc, #632]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80e4 	beq.w	8000f16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d007      	beq.n	8000d64 <HAL_RCC_OscConfig+0x4c>
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	2b0c      	cmp	r3, #12
 8000d58:	f040 808b 	bne.w	8000e72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	f040 8087 	bne.w	8000e72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d64:	4b92      	ldr	r3, [pc, #584]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d005      	beq.n	8000d7c <HAL_RCC_OscConfig+0x64>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e3e8      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a1a      	ldr	r2, [r3, #32]
 8000d80:	4b8b      	ldr	r3, [pc, #556]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <HAL_RCC_OscConfig+0x7e>
 8000d8c:	4b88      	ldr	r3, [pc, #544]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d94:	e005      	b.n	8000da2 <HAL_RCC_OscConfig+0x8a>
 8000d96:	4b86      	ldr	r3, [pc, #536]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d223      	bcs.n	8000dee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fd42 	bl	8001834 <RCC_SetFlashLatencyFromMSIRange>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e3c9      	b.n	800154e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dba:	4b7d      	ldr	r3, [pc, #500]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a7c      	ldr	r2, [pc, #496]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b7a      	ldr	r3, [pc, #488]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	4977      	ldr	r1, [pc, #476]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd8:	4b75      	ldr	r3, [pc, #468]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	4972      	ldr	r1, [pc, #456]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
 8000dec:	e025      	b.n	8000e3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dee:	4b70      	ldr	r3, [pc, #448]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a6f      	ldr	r2, [pc, #444]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b6d      	ldr	r3, [pc, #436]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	496a      	ldr	r1, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e0c:	4b68      	ldr	r3, [pc, #416]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	4965      	ldr	r1, [pc, #404]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d109      	bne.n	8000e3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fd02 	bl	8001834 <RCC_SetFlashLatencyFromMSIRange>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e389      	b.n	800154e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e3a:	f000 fc6f 	bl	800171c <HAL_RCC_GetSysClockFreq>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	495a      	ldr	r1, [pc, #360]	; (8000fb4 <HAL_RCC_OscConfig+0x29c>)
 8000e4c:	5ccb      	ldrb	r3, [r1, r3]
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	fa22 f303 	lsr.w	r3, r2, r3
 8000e56:	4a58      	ldr	r2, [pc, #352]	; (8000fb8 <HAL_RCC_OscConfig+0x2a0>)
 8000e58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e5a:	4b58      	ldr	r3, [pc, #352]	; (8000fbc <HAL_RCC_OscConfig+0x2a4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fbe4 	bl	800062c <HAL_InitTick>
 8000e64:	4603      	mov	r3, r0
 8000e66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d052      	beq.n	8000f14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	e36d      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d032      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e7a:	4b4d      	ldr	r3, [pc, #308]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e86:	f7ff fc21 	bl	80006cc <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fc1d 	bl	80006cc <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e356      	b.n	800154e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ea0:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eac:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a3f      	ldr	r2, [pc, #252]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	493a      	ldr	r1, [pc, #232]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
 8000ede:	e01a      	b.n	8000f16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ee0:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a32      	ldr	r2, [pc, #200]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000ee6:	f023 0301 	bic.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fbee 	bl	80006cc <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fbea 	bl	80006cc <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e323      	b.n	800154e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x1dc>
 8000f12:	e000      	b.n	8000f16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d073      	beq.n	800100a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d005      	beq.n	8000f34 <HAL_RCC_OscConfig+0x21c>
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	2b0c      	cmp	r3, #12
 8000f2c:	d10e      	bne.n	8000f4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d10b      	bne.n	8000f4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d063      	beq.n	8001008 <HAL_RCC_OscConfig+0x2f0>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d15f      	bne.n	8001008 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e300      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d106      	bne.n	8000f64 <HAL_RCC_OscConfig+0x24c>
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e01d      	b.n	8000fa0 <HAL_RCC_OscConfig+0x288>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x270>
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e00b      	b.n	8000fa0 <HAL_RCC_OscConfig+0x288>
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <HAL_RCC_OscConfig+0x298>)
 8000f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d01b      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fb90 	bl	80006cc <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fae:	e010      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2ba>
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	0800277c 	.word	0x0800277c
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fb84 	bl	80006cc <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	; 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e2bd      	b.n	800154e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fd2:	4baf      	ldr	r3, [pc, #700]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x2a8>
 8000fde:	e014      	b.n	800100a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fb74 	bl	80006cc <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fb70 	bl	80006cc <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e2a9      	b.n	800154e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ffa:	4ba5      	ldr	r3, [pc, #660]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x2d0>
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d060      	beq.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x310>
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2b0c      	cmp	r3, #12
 8001020:	d119      	bne.n	8001056 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d116      	bne.n	8001056 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001028:	4b99      	ldr	r3, [pc, #612]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <HAL_RCC_OscConfig+0x328>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e286      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001040:	4b93      	ldr	r3, [pc, #588]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	061b      	lsls	r3, r3, #24
 800104e:	4990      	ldr	r1, [pc, #576]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001054:	e040      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d023      	beq.n	80010a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105e:	4b8c      	ldr	r3, [pc, #560]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a8b      	ldr	r2, [pc, #556]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106a:	f7ff fb2f 	bl	80006cc <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fb2b 	bl	80006cc <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e264      	b.n	800154e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001084:	4b82      	ldr	r3, [pc, #520]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b7f      	ldr	r3, [pc, #508]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	061b      	lsls	r3, r3, #24
 800109e:	497c      	ldr	r1, [pc, #496]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
 80010a4:	e018      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a6:	4b7a      	ldr	r3, [pc, #488]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a79      	ldr	r2, [pc, #484]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 80010ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fb0b 	bl	80006cc <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fb07 	bl	80006cc <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e240      	b.n	800154e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010cc:	4b70      	ldr	r3, [pc, #448]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f0      	bne.n	80010ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d03c      	beq.n	800115e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d01c      	beq.n	8001126 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ec:	4b68      	ldr	r3, [pc, #416]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 80010ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f2:	4a67      	ldr	r2, [pc, #412]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fc:	f7ff fae6 	bl	80006cc <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001104:	f7ff fae2 	bl	80006cc <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e21b      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001116:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0ef      	beq.n	8001104 <HAL_RCC_OscConfig+0x3ec>
 8001124:	e01b      	b.n	800115e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001126:	4b5a      	ldr	r3, [pc, #360]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112c:	4a58      	ldr	r2, [pc, #352]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001136:	f7ff fac9 	bl	80006cc <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113e:	f7ff fac5 	bl	80006cc <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e1fe      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001150:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ef      	bne.n	800113e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80a6 	beq.w	80012b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001170:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10d      	bne.n	8001198 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117c:	4b44      	ldr	r3, [pc, #272]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	4a43      	ldr	r2, [pc, #268]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001186:	6593      	str	r3, [r2, #88]	; 0x58
 8001188:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001194:	2301      	movs	r3, #1
 8001196:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <HAL_RCC_OscConfig+0x57c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d118      	bne.n	80011d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011a4:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_RCC_OscConfig+0x57c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a3a      	ldr	r2, [pc, #232]	; (8001294 <HAL_RCC_OscConfig+0x57c>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b0:	f7ff fa8c 	bl	80006cc <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b8:	f7ff fa88 	bl	80006cc <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1c1      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ca:	4b32      	ldr	r3, [pc, #200]	; (8001294 <HAL_RCC_OscConfig+0x57c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d108      	bne.n	80011f0 <HAL_RCC_OscConfig+0x4d8>
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 80011e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e4:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ee:	e024      	b.n	800123a <HAL_RCC_OscConfig+0x522>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d110      	bne.n	800121a <HAL_RCC_OscConfig+0x502>
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fe:	4a24      	ldr	r2, [pc, #144]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120e:	4a20      	ldr	r2, [pc, #128]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001218:	e00f      	b.n	800123a <HAL_RCC_OscConfig+0x522>
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 800121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 800122c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001232:	f023 0304 	bic.w	r3, r3, #4
 8001236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d016      	beq.n	8001270 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001242:	f7ff fa43 	bl	80006cc <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001248:	e00a      	b.n	8001260 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fa3f 	bl	80006cc <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f241 3288 	movw	r2, #5000	; 0x1388
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e176      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_OscConfig+0x578>)
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0ed      	beq.n	800124a <HAL_RCC_OscConfig+0x532>
 800126e:	e01a      	b.n	80012a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff fa2c 	bl	80006cc <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001276:	e00f      	b.n	8001298 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001278:	f7ff fa28 	bl	80006cc <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	; 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d906      	bls.n	8001298 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e15f      	b.n	800154e <HAL_RCC_OscConfig+0x836>
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001298:	4baa      	ldr	r3, [pc, #680]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1e8      	bne.n	8001278 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ac:	4ba5      	ldr	r3, [pc, #660]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	4aa4      	ldr	r2, [pc, #656]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80012b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03c      	beq.n	800133e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d01c      	beq.n	8001306 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012cc:	4b9d      	ldr	r3, [pc, #628]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80012ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d2:	4a9c      	ldr	r2, [pc, #624]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012dc:	f7ff f9f6 	bl	80006cc <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e4:	f7ff f9f2 	bl	80006cc <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e12b      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012f6:	4b93      	ldr	r3, [pc, #588]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80012f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ef      	beq.n	80012e4 <HAL_RCC_OscConfig+0x5cc>
 8001304:	e01b      	b.n	800133e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001306:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800130c:	4a8d      	ldr	r2, [pc, #564]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001316:	f7ff f9d9 	bl	80006cc <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800131e:	f7ff f9d5 	bl	80006cc <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e10e      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001330:	4b84      	ldr	r3, [pc, #528]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ef      	bne.n	800131e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8102 	beq.w	800154c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	2b02      	cmp	r3, #2
 800134e:	f040 80c5 	bne.w	80014dc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001352:	4b7c      	ldr	r3, [pc, #496]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0203 	and.w	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	429a      	cmp	r2, r3
 8001364:	d12c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	3b01      	subs	r3, #1
 8001372:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d123      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001382:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d11b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001392:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d113      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	3b01      	subs	r3, #1
 80013a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d109      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d067      	beq.n	8001490 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	d062      	beq.n	800148c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0bb      	b.n	800154e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013d6:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a5a      	ldr	r2, [pc, #360]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80013dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013e2:	f7ff f973 	bl	80006cc <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff f96f 	bl	80006cc <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0a8      	b.n	800154e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013fc:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001408:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <HAL_RCC_OscConfig+0x830>)
 800140e:	4013      	ands	r3, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001418:	3a01      	subs	r2, #1
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	4311      	orrs	r1, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	4311      	orrs	r1, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800142a:	0852      	lsrs	r2, r2, #1
 800142c:	3a01      	subs	r2, #1
 800142e:	0552      	lsls	r2, r2, #21
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001436:	0852      	lsrs	r2, r2, #1
 8001438:	3a01      	subs	r2, #1
 800143a:	0652      	lsls	r2, r2, #25
 800143c:	4311      	orrs	r1, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001442:	06d2      	lsls	r2, r2, #27
 8001444:	430a      	orrs	r2, r1
 8001446:	493f      	ldr	r1, [pc, #252]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001448:	4313      	orrs	r3, r2
 800144a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800144c:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001456:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001458:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a39      	ldr	r2, [pc, #228]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001462:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001464:	f7ff f932 	bl	80006cc <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff f92e 	bl	80006cc <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e067      	b.n	800154e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800148a:	e05f      	b.n	800154c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e05e      	b.n	800154e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001490:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d157      	bne.n	800154c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a28      	ldr	r2, [pc, #160]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a25      	ldr	r2, [pc, #148]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014b4:	f7ff f90a 	bl	80006cc <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff f906 	bl	80006cc <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e03f      	b.n	800154e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x7a4>
 80014da:	e037      	b.n	800154c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	d02d      	beq.n	800153e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ec:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4a11      	ldr	r2, [pc, #68]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001500:	f023 0303 	bic.w	r3, r3, #3
 8001504:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800150c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001514:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff f8d9 	bl	80006cc <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff f8d5 	bl	80006cc <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e00e      	b.n	800154e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x806>
 800153c:	e006      	b.n	800154c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e005      	b.n	800154e <HAL_RCC_OscConfig+0x836>
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0c8      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d910      	bls.n	800159c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 0207 	bic.w	r2, r3, #7
 8001582:	4961      	ldr	r1, [pc, #388]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b0      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d04c      	beq.n	8001642 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d107      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b0:	4b56      	ldr	r3, [pc, #344]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d121      	bne.n	8001600 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e09e      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d115      	bne.n	8001600 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e092      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d109      	bne.n	8001600 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e086      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e07e      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001600:	4b42      	ldr	r3, [pc, #264]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 0203 	bic.w	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	493f      	ldr	r1, [pc, #252]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001612:	f7ff f85b 	bl	80006cc <HAL_GetTick>
 8001616:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001618:	e00a      	b.n	8001630 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161a:	f7ff f857 	bl	80006cc <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e066      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 020c 	and.w	r2, r3, #12
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	429a      	cmp	r2, r3
 8001640:	d1eb      	bne.n	800161a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d008      	beq.n	8001660 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	492c      	ldr	r1, [pc, #176]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d210      	bcs.n	8001690 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 0207 	bic.w	r2, r3, #7
 8001676:	4924      	ldr	r1, [pc, #144]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_ClockConfig+0x1b0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e036      	b.n	80016fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4918      	ldr	r1, [pc, #96]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4910      	ldr	r1, [pc, #64]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ce:	f000 f825 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016d2:	4602      	mov	r2, r0
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_RCC_ClockConfig+0x1b4>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	490c      	ldr	r1, [pc, #48]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	5ccb      	ldrb	r3, [r1, r3]
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff9a 	bl	800062c <HAL_InitTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80016fc:	7afb      	ldrb	r3, [r7, #11]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40022000 	.word	0x40022000
 800170c:	40021000 	.word	0x40021000
 8001710:	0800277c 	.word	0x0800277c
 8001714:	20000008 	.word	0x20000008
 8001718:	2000000c 	.word	0x2000000c

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172a:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x34>
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d121      	bne.n	800178e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d11e      	bne.n	800178e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001750:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e005      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001778:	4a2b      	ldr	r2, [pc, #172]	; (8001828 <HAL_RCC_GetSysClockFreq+0x10c>)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b04      	cmp	r3, #4
 8001792:	d102      	bne.n	800179a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_RCC_GetSysClockFreq+0x110>)
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	e004      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2b08      	cmp	r3, #8
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_RCC_GetSysClockFreq+0x114>)
 80017a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d134      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d003      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d003      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0xac>
 80017c0:	e005      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_RCC_GetSysClockFreq+0x110>)
 80017c4:	617b      	str	r3, [r7, #20]
      break;
 80017c6:	e005      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ca:	617b      	str	r3, [r7, #20]
      break;
 80017cc:	e002      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	617b      	str	r3, [r7, #20]
      break;
 80017d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	3301      	adds	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	fb02 f203 	mul.w	r2, r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_RCC_GetSysClockFreq+0x108>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	0e5b      	lsrs	r3, r3, #25
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	3301      	adds	r3, #1
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001814:	69bb      	ldr	r3, [r7, #24]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	0800278c 	.word	0x0800278c
 800182c:	00f42400 	.word	0x00f42400
 8001830:	007a1200 	.word	0x007a1200

08001834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800184c:	f7ff fa00 	bl	8000c50 <HAL_PWREx_GetVoltageRange>
 8001850:	6178      	str	r0, [r7, #20]
 8001852:	e014      	b.n	800187e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a24      	ldr	r2, [pc, #144]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800186c:	f7ff f9f0 	bl	8000c50 <HAL_PWREx_GetVoltageRange>
 8001870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001884:	d10b      	bne.n	800189e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d919      	bls.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2ba0      	cmp	r3, #160	; 0xa0
 8001890:	d902      	bls.n	8001898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001892:	2302      	movs	r3, #2
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e013      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	e010      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b80      	cmp	r3, #128	; 0x80
 80018a2:	d902      	bls.n	80018aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018a4:	2303      	movs	r3, #3
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	e00a      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b80      	cmp	r3, #128	; 0x80
 80018ae:	d102      	bne.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018b0:	2302      	movs	r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	e004      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b70      	cmp	r3, #112	; 0x70
 80018ba:	d101      	bne.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018bc:	2301      	movs	r3, #1
 80018be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 0207 	bic.w	r2, r3, #7
 80018c8:	4909      	ldr	r1, [pc, #36]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d001      	beq.n	80018e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40022000 	.word	0x40022000

080018f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e095      	b.n	8001a32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	d108      	bne.n	8001920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001916:	d009      	beq.n	800192c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
 800191e:	e005      	b.n	800192c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe fd90 	bl	800046c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001962:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800196c:	d902      	bls.n	8001974 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e002      	b.n	800197a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001982:	d007      	beq.n	8001994 <HAL_SPI_Init+0xa0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800198c:	d002      	beq.n	8001994 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d6:	ea42 0103 	orr.w	r1, r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	0c1b      	lsrs	r3, r3, #16
 80019f0:	f003 0204 	and.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001a10:	ea42 0103 	orr.w	r1, r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b088      	sub	sp, #32
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_SPI_Transmit+0x22>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e158      	b.n	8001d0e <HAL_SPI_Transmit+0x2d4>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a64:	f7fe fe32 	bl	80006cc <HAL_GetTick>
 8001a68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d002      	beq.n	8001a80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a7e:	e13d      	b.n	8001cfc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_SPI_Transmit+0x52>
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a90:	e134      	b.n	8001cfc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2203      	movs	r2, #3
 8001a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	88fa      	ldrh	r2, [r7, #6]
 8001aaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	88fa      	ldrh	r2, [r7, #6]
 8001ab0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001adc:	d10f      	bne.n	8001afe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001afc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b08:	2b40      	cmp	r3, #64	; 0x40
 8001b0a:	d007      	beq.n	8001b1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b24:	d94b      	bls.n	8001bbe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_SPI_Transmit+0xfa>
 8001b2e:	8afb      	ldrh	r3, [r7, #22]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d13e      	bne.n	8001bb2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	1c9a      	adds	r2, r3, #2
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b58:	e02b      	b.n	8001bb2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d112      	bne.n	8001b8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	1c9a      	adds	r2, r3, #2
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b8c:	e011      	b.n	8001bb2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b8e:	f7fe fd9d 	bl	80006cc <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d803      	bhi.n	8001ba6 <HAL_SPI_Transmit+0x16c>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d102      	bne.n	8001bac <HAL_SPI_Transmit+0x172>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bb0:	e0a4      	b.n	8001cfc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ce      	bne.n	8001b5a <HAL_SPI_Transmit+0x120>
 8001bbc:	e07c      	b.n	8001cb8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_SPI_Transmit+0x192>
 8001bc6:	8afb      	ldrh	r3, [r7, #22]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d170      	bne.n	8001cae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d912      	bls.n	8001bfc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bda:	881a      	ldrh	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	1c9a      	adds	r2, r3, #2
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b02      	subs	r3, #2
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bfa:	e058      	b.n	8001cae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	330c      	adds	r3, #12
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001c22:	e044      	b.n	8001cae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d12b      	bne.n	8001c8a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d912      	bls.n	8001c62 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	1c9a      	adds	r2, r3, #2
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b02      	subs	r3, #2
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c60:	e025      	b.n	8001cae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	330c      	adds	r3, #12
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c88:	e011      	b.n	8001cae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c8a:	f7fe fd1f 	bl	80006cc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d803      	bhi.n	8001ca2 <HAL_SPI_Transmit+0x268>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d102      	bne.n	8001ca8 <HAL_SPI_Transmit+0x26e>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cac:	e026      	b.n	8001cfc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1b5      	bne.n	8001c24 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	6839      	ldr	r1, [r7, #0]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fcdf 	bl	8002680 <SPI_EndRxTxTransaction>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10a      	bne.n	8001cec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	77fb      	strb	r3, [r7, #31]
 8001cf8:	e000      	b.n	8001cfc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001cfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b088      	sub	sp, #32
 8001d1a:	af02      	add	r7, sp, #8
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4613      	mov	r3, r2
 8001d24:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d32:	d112      	bne.n	8001d5a <HAL_SPI_Receive+0x44>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10e      	bne.n	8001d5a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f910 	bl	8001f76 <HAL_SPI_TransmitReceive>
 8001d56:	4603      	mov	r3, r0
 8001d58:	e109      	b.n	8001f6e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_SPI_Receive+0x52>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e102      	b.n	8001f6e <HAL_SPI_Receive+0x258>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d70:	f7fe fcac 	bl	80006cc <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d002      	beq.n	8001d88 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d86:	e0e9      	b.n	8001f5c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_SPI_Receive+0x7e>
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d98:	e0e0      	b.n	8001f5c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	88fa      	ldrh	r2, [r7, #6]
 8001db2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	88fa      	ldrh	r2, [r7, #6]
 8001dba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001de4:	d908      	bls.n	8001df8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	e007      	b.n	8001e08 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e06:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e10:	d10f      	bne.n	8001e32 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e30:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3c:	2b40      	cmp	r3, #64	; 0x40
 8001e3e:	d007      	beq.n	8001e50 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e58:	d867      	bhi.n	8001f2a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e5a:	e030      	b.n	8001ebe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d117      	bne.n	8001e9a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f103 020c 	add.w	r2, r3, #12
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	7812      	ldrb	r2, [r2, #0]
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001e98:	e011      	b.n	8001ebe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e9a:	f7fe fc17 	bl	80006cc <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d803      	bhi.n	8001eb2 <HAL_SPI_Receive+0x19c>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d102      	bne.n	8001eb8 <HAL_SPI_Receive+0x1a2>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ebc:	e04e      	b.n	8001f5c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1c8      	bne.n	8001e5c <HAL_SPI_Receive+0x146>
 8001eca:	e034      	b.n	8001f36 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d115      	bne.n	8001f06 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001f04:	e011      	b.n	8001f2a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f06:	f7fe fbe1 	bl	80006cc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d803      	bhi.n	8001f1e <HAL_SPI_Receive+0x208>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d102      	bne.n	8001f24 <HAL_SPI_Receive+0x20e>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f28:	e018      	b.n	8001f5c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ca      	bne.n	8001ecc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	6839      	ldr	r1, [r7, #0]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 fb48 	bl	80025d0 <SPI_EndRxTransaction>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	75fb      	strb	r3, [r7, #23]
 8001f58:	e000      	b.n	8001f5c <HAL_SPI_Receive+0x246>
  }

error :
 8001f5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b08a      	sub	sp, #40	; 0x28
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f84:	2301      	movs	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x26>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e1fb      	b.n	8002394 <HAL_SPI_TransmitReceive+0x41e>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa4:	f7fe fb92 	bl	80006cc <HAL_GetTick>
 8001fa8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001fb0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fc0:	7efb      	ldrb	r3, [r7, #27]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d00e      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x6e>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fcc:	d106      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x66>
 8001fd6:	7efb      	ldrb	r3, [r7, #27]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d003      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001fe2:	e1cd      	b.n	8002380 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_SPI_TransmitReceive+0x80>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_SPI_TransmitReceive+0x80>
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001ffc:	e1c0      	b.n	8002380 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b04      	cmp	r3, #4
 8002008:	d003      	beq.n	8002012 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2205      	movs	r2, #5
 800200e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	887a      	ldrh	r2, [r7, #2]
 8002022:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	887a      	ldrh	r2, [r7, #2]
 800202a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	887a      	ldrh	r2, [r7, #2]
 800203e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002054:	d802      	bhi.n	800205c <HAL_SPI_TransmitReceive+0xe6>
 8002056:	8a3b      	ldrh	r3, [r7, #16]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d908      	bls.n	800206e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	e007      	b.n	800207e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800207c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b40      	cmp	r3, #64	; 0x40
 800208a:	d007      	beq.n	800209c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020a4:	d97c      	bls.n	80021a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_SPI_TransmitReceive+0x13e>
 80020ae:	8a7b      	ldrh	r3, [r7, #18]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d169      	bne.n	8002188 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	1c9a      	adds	r2, r3, #2
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d8:	e056      	b.n	8002188 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d11b      	bne.n	8002120 <HAL_SPI_TransmitReceive+0x1aa>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_SPI_TransmitReceive+0x1aa>
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d113      	bne.n	8002120 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	881a      	ldrh	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002108:	1c9a      	adds	r2, r3, #2
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d11c      	bne.n	8002168 <HAL_SPI_TransmitReceive+0x1f2>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	b292      	uxth	r2, r2
 8002146:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	1c9a      	adds	r2, r3, #2
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002164:	2301      	movs	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002168:	f7fe fab0 	bl	80006cc <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002174:	429a      	cmp	r2, r3
 8002176:	d807      	bhi.n	8002188 <HAL_SPI_TransmitReceive+0x212>
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d003      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002186:	e0fb      	b.n	8002380 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1a3      	bne.n	80020da <HAL_SPI_TransmitReceive+0x164>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d19d      	bne.n	80020da <HAL_SPI_TransmitReceive+0x164>
 800219e:	e0df      	b.n	8002360 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_SPI_TransmitReceive+0x23a>
 80021a8:	8a7b      	ldrh	r3, [r7, #18]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	f040 80cb 	bne.w	8002346 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d912      	bls.n	80021e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	881a      	ldrh	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	1c9a      	adds	r2, r3, #2
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b02      	subs	r3, #2
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021de:	e0b2      	b.n	8002346 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	330c      	adds	r3, #12
 80021ea:	7812      	ldrb	r2, [r2, #0]
 80021ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002206:	e09e      	b.n	8002346 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d134      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x30a>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d02f      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x30a>
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	2b01      	cmp	r3, #1
 8002224:	d12c      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d912      	bls.n	8002256 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	881a      	ldrh	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	1c9a      	adds	r2, r3, #2
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b02      	subs	r3, #2
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002254:	e012      	b.n	800227c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	330c      	adds	r3, #12
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d148      	bne.n	8002320 <HAL_SPI_TransmitReceive+0x3aa>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d042      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d923      	bls.n	80022ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	b292      	uxth	r2, r2
 80022b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b02      	subs	r3, #2
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d81f      	bhi.n	800231c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	e016      	b.n	800231c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f103 020c 	add.w	r2, r3, #12
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800231c:	2301      	movs	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002320:	f7fe f9d4 	bl	80006cc <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232c:	429a      	cmp	r2, r3
 800232e:	d803      	bhi.n	8002338 <HAL_SPI_TransmitReceive+0x3c2>
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002336:	d102      	bne.n	800233e <HAL_SPI_TransmitReceive+0x3c8>
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002344:	e01c      	b.n	8002380 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	f47f af5b 	bne.w	8002208 <HAL_SPI_TransmitReceive+0x292>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	f47f af54 	bne.w	8002208 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f98b 	bl	8002680 <SPI_EndRxTxTransaction>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	661a      	str	r2, [r3, #96]	; 0x60
 800237c:	e000      	b.n	8002380 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800237e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002394:	4618      	mov	r0, r3
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023ac:	f7fe f98e 	bl	80006cc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023bc:	f7fe f986 	bl	80006cc <HAL_GetTick>
 80023c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	015b      	lsls	r3, r3, #5
 80023c8:	0d1b      	lsrs	r3, r3, #20
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d2:	e054      	b.n	800247e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023da:	d050      	beq.n	800247e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023dc:	f7fe f976 	bl	80006cc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d902      	bls.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d13d      	bne.n	800246e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800240a:	d111      	bne.n	8002430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002414:	d004      	beq.n	8002420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	d107      	bne.n	8002430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800242e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002438:	d10f      	bne.n	800245a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e017      	b.n	800249e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3b01      	subs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	429a      	cmp	r2, r3
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	429a      	cmp	r2, r3
 800249a:	d19b      	bne.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000008 	.word	0x20000008

080024ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80024ba:	f7fe f907 	bl	80006cc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024ca:	f7fe f8ff 	bl	80006cc <HAL_GetTick>
 80024ce:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80024d0:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <SPI_WaitFifoStateUntilTimeout+0x120>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00da      	lsls	r2, r3, #3
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	0d1b      	lsrs	r3, r3, #20
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80024e8:	e062      	b.n	80025b0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024f0:	d109      	bne.n	8002506 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	330c      	adds	r3, #12
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002504:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d050      	beq.n	80025b0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800250e:	f7fe f8dd 	bl	80006cc <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	429a      	cmp	r2, r3
 800251c:	d902      	bls.n	8002524 <SPI_WaitFifoStateUntilTimeout+0x78>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d13d      	bne.n	80025a0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002532:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800253c:	d111      	bne.n	8002562 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002546:	d004      	beq.n	8002552 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002550:	d107      	bne.n	8002562 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002560:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	d10f      	bne.n	800258c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800258a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e010      	b.n	80025c2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d194      	bne.n	80024ea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000008 	.word	0x20000008

080025d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e4:	d111      	bne.n	800260a <SPI_EndRxTransaction+0x3a>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ee:	d004      	beq.n	80025fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f8:	d107      	bne.n	800260a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2200      	movs	r2, #0
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff fec1 	bl	800239c <SPI_WaitFlagStateUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e023      	b.n	8002678 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002638:	d11d      	bne.n	8002676 <SPI_EndRxTransaction+0xa6>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002642:	d004      	beq.n	800264e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264c:	d113      	bne.n	8002676 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff ff26 	bl	80024ac <SPI_WaitFifoStateUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	f043 0220 	orr.w	r2, r3, #32
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e000      	b.n	8002678 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff ff07 	bl	80024ac <SPI_WaitFifoStateUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e027      	b.n	8002704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f7ff fe6c 	bl	800239c <SPI_WaitFlagStateUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e014      	b.n	8002704 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7ff fee0 	bl	80024ac <SPI_WaitFifoStateUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	f043 0220 	orr.w	r2, r3, #32
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e000      	b.n	8002704 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <__libc_init_array>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	4d0d      	ldr	r5, [pc, #52]	; (8002744 <__libc_init_array+0x38>)
 8002710:	4c0d      	ldr	r4, [pc, #52]	; (8002748 <__libc_init_array+0x3c>)
 8002712:	1b64      	subs	r4, r4, r5
 8002714:	10a4      	asrs	r4, r4, #2
 8002716:	2600      	movs	r6, #0
 8002718:	42a6      	cmp	r6, r4
 800271a:	d109      	bne.n	8002730 <__libc_init_array+0x24>
 800271c:	4d0b      	ldr	r5, [pc, #44]	; (800274c <__libc_init_array+0x40>)
 800271e:	4c0c      	ldr	r4, [pc, #48]	; (8002750 <__libc_init_array+0x44>)
 8002720:	f000 f820 	bl	8002764 <_init>
 8002724:	1b64      	subs	r4, r4, r5
 8002726:	10a4      	asrs	r4, r4, #2
 8002728:	2600      	movs	r6, #0
 800272a:	42a6      	cmp	r6, r4
 800272c:	d105      	bne.n	800273a <__libc_init_array+0x2e>
 800272e:	bd70      	pop	{r4, r5, r6, pc}
 8002730:	f855 3b04 	ldr.w	r3, [r5], #4
 8002734:	4798      	blx	r3
 8002736:	3601      	adds	r6, #1
 8002738:	e7ee      	b.n	8002718 <__libc_init_array+0xc>
 800273a:	f855 3b04 	ldr.w	r3, [r5], #4
 800273e:	4798      	blx	r3
 8002740:	3601      	adds	r6, #1
 8002742:	e7f2      	b.n	800272a <__libc_init_array+0x1e>
 8002744:	080027bc 	.word	0x080027bc
 8002748:	080027bc 	.word	0x080027bc
 800274c:	080027bc 	.word	0x080027bc
 8002750:	080027c0 	.word	0x080027c0

08002754 <memset>:
 8002754:	4402      	add	r2, r0
 8002756:	4603      	mov	r3, r0
 8002758:	4293      	cmp	r3, r2
 800275a:	d100      	bne.n	800275e <memset+0xa>
 800275c:	4770      	bx	lr
 800275e:	f803 1b01 	strb.w	r1, [r3], #1
 8002762:	e7f9      	b.n	8002758 <memset+0x4>

08002764 <_init>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr

08002770 <_fini>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	bf00      	nop
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr
