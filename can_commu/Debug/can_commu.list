
can_commu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800267c  0800267c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800267c  0800267c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800267c  0800267c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002680  08002680  00012680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  08002690  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08002690  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c4b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001539  00000000  00000000  00027c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  000291c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  00029858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f55d  00000000  00000000  00029e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b1d  00000000  00000000  000493a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be340  00000000  00000000  0004fec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001944  00000000  00000000  0010e258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002614 	.word	0x08002614

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002614 	.word	0x08002614

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b094      	sub	sp, #80	; 0x50
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa3c 	bl	800064e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f841 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8bb 	bl	8000354 <MX_GPIO_Init>
  MX_CAN1_Init();
 80001de:	f000 f883 	bl	80002e8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80001e2:	2200      	movs	r2, #0
 80001e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ec:	f001 fb7c 	bl	80018e8 <HAL_GPIO_WritePin>
  CAN_FilterTypeDef sFilterConfig ;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001f0:	2300      	movs	r3, #0
 80001f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001f4:	2301      	movs	r3, #1
 80001f6:	643b      	str	r3, [r7, #64]	; 0x40
  sFilterConfig.FilterIdHigh = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.FilterIdLow = 0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sFilterConfig.FilterMaskIdHigh = 0;
 8000200:	2300      	movs	r3, #0
 8000202:	62fb      	str	r3, [r7, #44]	; 0x2c
  sFilterConfig.FilterMaskIdLow = 0;
 8000204:	2300      	movs	r3, #0
 8000206:	633b      	str	r3, [r7, #48]	; 0x30
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000208:	2300      	movs	r3, #0
 800020a:	637b      	str	r3, [r7, #52]	; 0x34
  sFilterConfig.FilterActivation = ENABLE;
 800020c:	2301      	movs	r3, #1
 800020e:	647b      	str	r3, [r7, #68]	; 0x44
  sFilterConfig.FilterBank = 1;
 8000210:	2301      	movs	r3, #1
 8000212:	63bb      	str	r3, [r7, #56]	; 0x38


  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000218:	4619      	mov	r1, r3
 800021a:	480e      	ldr	r0, [pc, #56]	; (8000254 <main+0x88>)
 800021c:	f000 fb87 	bl	800092e <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8000220:	480c      	ldr	r0, [pc, #48]	; (8000254 <main+0x88>)
 8000222:	f000 fc4e 	bl	8000ac2 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000226:	2102      	movs	r1, #2
 8000228:	480a      	ldr	r0, [pc, #40]	; (8000254 <main+0x88>)
 800022a:	f000 fe7b 	bl	8000f24 <HAL_CAN_ActivateNotification>

  /* CAN Tx Message */
  CAN_TxHeaderTypeDef TxHeader;
  uint8_t TxData[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <main+0x8c>)
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000236:	e883 0003 	stmia.w	r3, {r0, r1}

  TxHeader.StdId = 0x123; // Example standard ID
 800023a:	f240 1323 	movw	r3, #291	; 0x123
 800023e:	60fb      	str	r3, [r7, #12]
  TxHeader.IDE = CAN_ID_STD; // Use standard identifier
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]
  TxHeader.RTR = CAN_RTR_DATA; // Data frame
 8000244:	2300      	movs	r3, #0
 8000246:	61bb      	str	r3, [r7, #24]
  TxHeader.DLC = 8; // Data length is 8 bytes
 8000248:	2308      	movs	r3, #8
 800024a:	61fb      	str	r3, [r7, #28]

  uint32_t TxMailbox = CAN_TX_MAILBOX0;
 800024c:	2301      	movs	r3, #1
 800024e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	e7fe      	b.n	8000250 <main+0x84>
 8000252:	bf00      	nop
 8000254:	20000030 	.word	0x20000030
 8000258:	0800262c 	.word	0x0800262c

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b096      	sub	sp, #88	; 0x58
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0314 	add.w	r3, r7, #20
 8000266:	2244      	movs	r2, #68	; 0x44
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 f9ca 	bl	8002604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	463b      	mov	r3, r7
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800027e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000282:	f001 fb57 	bl	8001934 <HAL_PWREx_ControlVoltageScaling>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800028c:	f000 f8c8 	bl	8000420 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000290:	2310      	movs	r3, #16
 8000292:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000294:	2301      	movs	r3, #1
 8000296:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800029c:	2360      	movs	r3, #96	; 0x60
 800029e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	2300      	movs	r3, #0
 80002a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fb99 	bl	80019e0 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002b4:	f000 f8b4 	bl	8000420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002bc:	2300      	movs	r3, #0
 80002be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002cc:	463b      	mov	r3, r7
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 ffa5 	bl	8002220 <HAL_RCC_ClockConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002dc:	f000 f8a0 	bl	8000420 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3758      	adds	r7, #88	; 0x58
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_CAN1_Init+0x64>)
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <MX_CAN1_Init+0x68>)
 80002f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80002f2:	4b16      	ldr	r3, [pc, #88]	; (800034c <MX_CAN1_Init+0x64>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_CAN1_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_CAN1_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_CAN1_Init+0x64>)
 8000306:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800030a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_CAN1_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_CAN1_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_CAN1_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_CAN1_Init+0x64>)
 8000320:	2200      	movs	r2, #0
 8000322:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_CAN1_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_CAN1_Init+0x64>)
 800032c:	2200      	movs	r2, #0
 800032e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_CAN1_Init+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_CAN1_Init+0x64>)
 8000338:	f000 f9fe 	bl	8000738 <HAL_CAN_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000342:	f000 f86d 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000030 	.word	0x20000030
 8000350:	40006400 	.word	0x40006400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
 8000366:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_GPIO_Init+0x60>)
 800036a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036c:	4a11      	ldr	r2, [pc, #68]	; (80003b4 <MX_GPIO_Init+0x60>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_GPIO_Init+0x60>)
 8000376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f001 faad 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800038e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000392:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000394:	2301      	movs	r3, #1
 8000396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039c:	2300      	movs	r3, #0
 800039e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a8:	f001 f924 	bl	80015f4 <HAL_GPIO_Init>

}
 80003ac:	bf00      	nop
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000

080003b8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
//void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b094      	sub	sp, #80	; 0x50
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef can_rx_header;
    uint8_t can_rx_data[8]; // Buffer to store received data

    if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &can_rx_header, can_rx_data) == HAL_OK)
 80003c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80003c8:	2100      	movs	r1, #0
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f000 fc98 	bl	8000d00 <HAL_CAN_GetRxMessage>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d11e      	bne.n	8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
    {
        if (can_rx_header.StdId == 0x300)
 80003d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80003dc:	d11a      	bne.n	8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
        {
            CAN_TxHeaderTypeDef can_tx_header;
            can_tx_header.DLC  = 8;
 80003de:	2308      	movs	r3, #8
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
            can_tx_header.StdId = 0x701;
 80003e2:	f240 7301 	movw	r3, #1793	; 0x701
 80003e6:	617b      	str	r3, [r7, #20]
            can_tx_header.IDE  = CAN_ID_STD;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
            can_tx_header.RTR  = CAN_RTR_DATA;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
            uint8_t can_tx_data[8] = {0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01 };
 80003f0:	4a0a      	ldr	r2, [pc, #40]	; (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003fa:	e883 0003 	stmia.w	r3, {r0, r1}
            uint32_t tx_mail_box = CAN_TX_MAILBOX0;
 80003fe:	2301      	movs	r3, #1
 8000400:	60bb      	str	r3, [r7, #8]
            HAL_CAN_AddTxMessage(hcan1, &can_tx_header, can_tx_data, &tx_mail_box);
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	f107 020c 	add.w	r2, r7, #12
 800040a:	f107 0114 	add.w	r1, r7, #20
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f000 fb9b 	bl	8000b4a <HAL_CAN_AddTxMessage>
        }
    }
}
 8000414:	bf00      	nop
 8000416:	3750      	adds	r7, #80	; 0x50
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	08002634 	.word	0x08002634

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <HAL_MspInit+0x44>)
 8000434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <HAL_MspInit+0x44>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6613      	str	r3, [r2, #96]	; 0x60
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <HAL_MspInit+0x44>)
 8000440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <HAL_MspInit+0x44>)
 800044c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800044e:	4a08      	ldr	r2, [pc, #32]	; (8000470 <HAL_MspInit+0x44>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	6593      	str	r3, [r2, #88]	; 0x58
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <HAL_MspInit+0x44>)
 8000458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000

08000474 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a20      	ldr	r2, [pc, #128]	; (8000514 <HAL_CAN_MspInit+0xa0>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d139      	bne.n	800050a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <HAL_CAN_MspInit+0xa4>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049a:	4a1f      	ldr	r2, [pc, #124]	; (8000518 <HAL_CAN_MspInit+0xa4>)
 800049c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a0:	6593      	str	r3, [r2, #88]	; 0x58
 80004a2:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <HAL_CAN_MspInit+0xa4>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <HAL_CAN_MspInit+0xa4>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a19      	ldr	r2, [pc, #100]	; (8000518 <HAL_CAN_MspInit+0xa4>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <HAL_CAN_MspInit+0xa4>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80004d8:	2309      	movs	r3, #9
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f001 f885 	bl	80015f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2013      	movs	r0, #19
 80004f0:	f001 f849 	bl	8001586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80004f4:	2013      	movs	r0, #19
 80004f6:	f001 f862 	bl	80015be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	2014      	movs	r0, #20
 8000500:	f001 f841 	bl	8001586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000504:	2014      	movs	r0, #20
 8000506:	f001 f85a 	bl	80015be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800050a:	bf00      	nop
 800050c:	3728      	adds	r7, #40	; 0x28
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40006400 	.word	0x40006400
 8000518:	40021000 	.word	0x40021000

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler+0x4>

08000522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>

0800052e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler+0x4>

0800053a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f8c6 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <CAN1_TX_IRQHandler+0x10>)
 8000576:	f000 fcfb 	bl	8000f70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000030 	.word	0x20000030

08000584 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <CAN1_RX0_IRQHandler+0x10>)
 800058a:	f000 fcf1 	bl	8000f70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000030 	.word	0x20000030

08000598 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <SystemInit+0x5c>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <SystemInit+0x5c>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <SystemInit+0x60>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <SystemInit+0x60>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <SystemInit+0x60>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <SystemInit+0x60>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <SystemInit+0x60>)
 80005c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <SystemInit+0x60>)
 80005d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <SystemInit+0x60>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <SystemInit+0x60>)
 80005dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <SystemInit+0x60>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00
 80005f8:	40021000 	.word	0x40021000

080005fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000600:	f7ff ffca 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000604:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000606:	e003      	b.n	8000610 <LoopCopyDataInit>

08000608 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800060a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800060c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800060e:	3104      	adds	r1, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000614:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000616:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000618:	d3f6      	bcc.n	8000608 <CopyDataInit>
	ldr	r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopForever+0x12>)
	b	LoopFillZerobss
 800061c:	e002      	b.n	8000624 <LoopFillZerobss>

0800061e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800061e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000620:	f842 3b04 	str.w	r3, [r2], #4

08000624 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <LoopForever+0x16>)
	cmp	r2, r3
 8000626:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000628:	d3f9      	bcc.n	800061e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800062a:	f001 ffc7 	bl	80025bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800062e:	f7ff fdcd 	bl	80001cc <main>

08000632 <LoopForever>:

LoopForever:
    b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000634:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8000638:	08002684 	.word	0x08002684
	ldr	r0, =_sdata
 800063c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000640:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000644:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000648:	2000005c 	.word	0x2000005c

0800064c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_IRQHandler>

0800064e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000654:	2300      	movs	r3, #0
 8000656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 ff89 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065e:	200f      	movs	r0, #15
 8000660:	f000 f80e 	bl	8000680 <HAL_InitTick>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	e001      	b.n	8000674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000670:	f7ff fedc 	bl	800042c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000674:	79fb      	ldrb	r3, [r7, #7]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_InitTick+0x6c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d023      	beq.n	80006dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <HAL_InitTick+0x70>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_InitTick+0x6c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 ff95 	bl	80015da <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10f      	bne.n	80006d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	d809      	bhi.n	80006d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006bc:	2200      	movs	r2, #0
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	f000 ff5f 	bl	8001586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c8:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <HAL_InitTick+0x74>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	e007      	b.n	80006e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	e004      	b.n	80006e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e001      	b.n	80006e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000004 	.word	0x20000004

080006f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_IncTick+0x20>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_IncTick+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_IncTick+0x24>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008
 800071c:	20000058 	.word	0x20000058

08000720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000058 	.word	0x20000058

08000738 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d101      	bne.n	800074a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e0ed      	b.n	8000926 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d102      	bne.n	800075c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fe8c 	bl	8000474 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f022 0202 	bic.w	r2, r2, #2
 800076a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800076c:	f7ff ffd8 	bl	8000720 <HAL_GetTick>
 8000770:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000772:	e012      	b.n	800079a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000774:	f7ff ffd4 	bl	8000720 <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	2b0a      	cmp	r3, #10
 8000780:	d90b      	bls.n	800079a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2205      	movs	r2, #5
 8000792:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e0c5      	b.n	8000926 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1e5      	bne.n	8000774 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0201 	orr.w	r2, r2, #1
 80007b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007b8:	f7ff ffb2 	bl	8000720 <HAL_GetTick>
 80007bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007be:	e012      	b.n	80007e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007c0:	f7ff ffae 	bl	8000720 <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	2b0a      	cmp	r3, #10
 80007cc:	d90b      	bls.n	80007e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2205      	movs	r2, #5
 80007de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e09f      	b.n	8000926 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0e5      	beq.n	80007c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7e1b      	ldrb	r3, [r3, #24]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d108      	bne.n	800080e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e007      	b.n	800081e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7e5b      	ldrb	r3, [r3, #25]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d108      	bne.n	8000838 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e007      	b.n	8000848 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000846:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7e9b      	ldrb	r3, [r3, #26]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d108      	bne.n	8000862 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 0220 	orr.w	r2, r2, #32
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e007      	b.n	8000872 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f022 0220 	bic.w	r2, r2, #32
 8000870:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7edb      	ldrb	r3, [r3, #27]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d108      	bne.n	800088c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f022 0210 	bic.w	r2, r2, #16
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e007      	b.n	800089c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0210 	orr.w	r2, r2, #16
 800089a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7f1b      	ldrb	r3, [r3, #28]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d108      	bne.n	80008b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0208 	orr.w	r2, r2, #8
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e007      	b.n	80008c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f022 0208 	bic.w	r2, r2, #8
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7f5b      	ldrb	r3, [r3, #29]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f042 0204 	orr.w	r2, r2, #4
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	e007      	b.n	80008f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f022 0204 	bic.w	r2, r2, #4
 80008ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	431a      	orrs	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	431a      	orrs	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	ea42 0103 	orr.w	r1, r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	430a      	orrs	r2, r1
 8000914:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2201      	movs	r2, #1
 8000920:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800092e:	b480      	push	{r7}
 8000930:	b087      	sub	sp, #28
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000944:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000946:	7cfb      	ldrb	r3, [r7, #19]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d003      	beq.n	8000954 <HAL_CAN_ConfigFilter+0x26>
 800094c:	7cfb      	ldrb	r3, [r7, #19]
 800094e:	2b02      	cmp	r3, #2
 8000950:	f040 80aa 	bne.w	8000aa8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800095a:	f043 0201 	orr.w	r2, r3, #1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	2201      	movs	r2, #1
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	43db      	mvns	r3, r3
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d123      	bne.n	80009d6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	43db      	mvns	r3, r3
 8000998:	401a      	ands	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3248      	adds	r2, #72	; 0x48
 80009b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009cc:	6979      	ldr	r1, [r7, #20]
 80009ce:	3348      	adds	r3, #72	; 0x48
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	440b      	add	r3, r1
 80009d4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d122      	bne.n	8000a24 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	431a      	orrs	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3248      	adds	r2, #72	; 0x48
 8000a04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a1a:	6979      	ldr	r1, [r7, #20]
 8000a1c:	3348      	adds	r3, #72	; 0x48
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	440b      	add	r3, r1
 8000a22:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d109      	bne.n	8000a40 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a3e:	e007      	b.n	8000a50 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d109      	bne.n	8000a6c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a6a:	e007      	b.n	8000a7c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	431a      	orrs	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d107      	bne.n	8000a94 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a9a:	f023 0201 	bic.w	r2, r3, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e006      	b.n	8000ab6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
  }
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	371c      	adds	r7, #28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d12e      	bne.n	8000b34 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2202      	movs	r2, #2
 8000ada:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 0201 	bic.w	r2, r2, #1
 8000aec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000aee:	f7ff fe17 	bl	8000720 <HAL_GetTick>
 8000af2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000af4:	e012      	b.n	8000b1c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000af6:	f7ff fe13 	bl	8000720 <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	2b0a      	cmp	r3, #10
 8000b02:	d90b      	bls.n	8000b1c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2205      	movs	r2, #5
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e012      	b.n	8000b42 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1e5      	bne.n	8000af6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e006      	b.n	8000b42 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b38:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
  }
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b089      	sub	sp, #36	; 0x24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b68:	7ffb      	ldrb	r3, [r7, #31]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d003      	beq.n	8000b76 <HAL_CAN_AddTxMessage+0x2c>
 8000b6e:	7ffb      	ldrb	r3, [r7, #31]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	f040 80b8 	bne.w	8000ce6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10a      	bne.n	8000b96 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d105      	bne.n	8000b96 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f000 80a0 	beq.w	8000cd6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	0e1b      	lsrs	r3, r3, #24
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d907      	bls.n	8000bb6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e09e      	b.n	8000cf4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10d      	bne.n	8000be4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bd2:	68f9      	ldr	r1, [r7, #12]
 8000bd4:	6809      	ldr	r1, [r1, #0]
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3318      	adds	r3, #24
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	440b      	add	r3, r1
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	e00f      	b.n	8000c04 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bf4:	68f9      	ldr	r1, [r7, #12]
 8000bf6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000bf8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3318      	adds	r3, #24
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	440b      	add	r3, r1
 8000c02:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6819      	ldr	r1, [r3, #0]
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	691a      	ldr	r2, [r3, #16]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	440b      	add	r3, r1
 8000c14:	3304      	adds	r3, #4
 8000c16:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	7d1b      	ldrb	r3, [r3, #20]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d111      	bne.n	8000c44 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3318      	adds	r3, #24
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4413      	add	r3, r2
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	6811      	ldr	r1, [r2, #0]
 8000c34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	3318      	adds	r3, #24
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	440b      	add	r3, r1
 8000c40:	3304      	adds	r3, #4
 8000c42:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3307      	adds	r3, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	061a      	lsls	r2, r3, #24
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3306      	adds	r3, #6
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	041b      	lsls	r3, r3, #16
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3305      	adds	r3, #5
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	3204      	adds	r2, #4
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	4610      	mov	r0, r2
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6811      	ldr	r1, [r2, #0]
 8000c6c:	ea43 0200 	orr.w	r2, r3, r0
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	440b      	add	r3, r1
 8000c76:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3303      	adds	r3, #3
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	061a      	lsls	r2, r3, #24
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3302      	adds	r3, #2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	041b      	lsls	r3, r3, #16
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3301      	adds	r3, #1
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	7812      	ldrb	r2, [r2, #0]
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	6811      	ldr	r1, [r2, #0]
 8000ca2:	ea43 0200 	orr.w	r2, r3, r0
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	440b      	add	r3, r1
 8000cac:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cb0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3318      	adds	r3, #24
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	4413      	add	r3, r2
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	6811      	ldr	r1, [r2, #0]
 8000cc4:	f043 0201 	orr.w	r2, r3, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3318      	adds	r3, #24
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	440b      	add	r3, r1
 8000cd0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e00e      	b.n	8000cf4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e006      	b.n	8000cf4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
  }
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3724      	adds	r7, #36	; 0x24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d14:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d003      	beq.n	8000d24 <HAL_CAN_GetRxMessage+0x24>
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	f040 80f3 	bne.w	8000f0a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10e      	bne.n	8000d48 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d116      	bne.n	8000d66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e0e7      	b.n	8000f18 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d107      	bne.n	8000d66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e0d8      	b.n	8000f18 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	331b      	adds	r3, #27
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	4413      	add	r3, r2
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0204 	and.w	r2, r3, #4
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10c      	bne.n	8000d9e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	331b      	adds	r3, #27
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	4413      	add	r3, r2
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	0d5b      	lsrs	r3, r3, #21
 8000d94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e00b      	b.n	8000db6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	331b      	adds	r3, #27
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	4413      	add	r3, r2
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	08db      	lsrs	r3, r3, #3
 8000dae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	331b      	adds	r3, #27
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	4413      	add	r3, r2
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0202 	and.w	r2, r3, #2
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	331b      	adds	r3, #27
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 020f 	and.w	r2, r3, #15
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	331b      	adds	r3, #27
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4413      	add	r3, r2
 8000df0:	3304      	adds	r3, #4
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	331b      	adds	r3, #27
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	4413      	add	r3, r2
 8000e08:	3304      	adds	r3, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0c1b      	lsrs	r3, r3, #16
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4413      	add	r3, r2
 8000e1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	4413      	add	r3, r2
 8000e34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	0a1a      	lsrs	r2, r3, #8
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	4413      	add	r3, r2
 8000e4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	0c1a      	lsrs	r2, r3, #16
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	3302      	adds	r3, #2
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	4413      	add	r3, r2
 8000e68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	0e1a      	lsrs	r2, r3, #24
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3303      	adds	r3, #3
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	4413      	add	r3, r2
 8000e82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0a1a      	lsrs	r2, r3, #8
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	3305      	adds	r3, #5
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	0c1a      	lsrs	r2, r3, #16
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	3306      	adds	r3, #6
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	0e1a      	lsrs	r2, r3, #24
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	3307      	adds	r3, #7
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0220 	orr.w	r2, r2, #32
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	e007      	b.n	8000f06 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 0220 	orr.w	r2, r2, #32
 8000f04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e006      	b.n	8000f18 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
  }
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <HAL_CAN_ActivateNotification+0x1e>
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d109      	bne.n	8000f56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6959      	ldr	r1, [r3, #20]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e006      	b.n	8000f64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
  }
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d07c      	beq.n	80010b0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d023      	beq.n	8001008 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f983 	bl	80012de <HAL_CAN_TxMailbox0CompleteCallback>
 8000fd8:	e016      	b.n	8001008 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d004      	beq.n	8000fee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
 8000fec:	e00c      	b.n	8001008 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8001000:	e002      	b.n	8001008 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f989 	bl	800131a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100e:	2b00      	cmp	r3, #0
 8001010:	d024      	beq.n	800105c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f963 	bl	80012f2 <HAL_CAN_TxMailbox1CompleteCallback>
 800102c:	e016      	b.n	800105c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
 8001040:	e00c      	b.n	800105c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
 8001054:	e002      	b.n	800105c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f969 	bl	800132e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d024      	beq.n	80010b0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f943 	bl	8001306 <HAL_CAN_TxMailbox2CompleteCallback>
 8001080:	e016      	b.n	80010b0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
 8001094:	e00c      	b.n	80010b0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
 80010a8:	e002      	b.n	80010b0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f949 	bl	8001342 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00c      	beq.n	80010d4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d007      	beq.n	80010d4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2210      	movs	r2, #16
 80010d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2208      	movs	r2, #8
 80010ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f930 	bl	8001356 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d009      	beq.n	8001114 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff f952 	bl	80003b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00c      	beq.n	8001138 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	f003 0310 	and.w	r3, r3, #16
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2210      	movs	r2, #16
 8001136:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2208      	movs	r2, #8
 8001152:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f912 	bl	800137e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2b00      	cmp	r3, #0
 8001162:	d009      	beq.n	8001178 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f8f9 	bl	800136a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2210      	movs	r2, #16
 8001192:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f8fc 	bl	8001392 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00b      	beq.n	80011bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2208      	movs	r2, #8
 80011b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f8f5 	bl	80013a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d07b      	beq.n	80012be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d072      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d008      	beq.n	80011ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d008      	beq.n	8001208 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800122a:	2b00      	cmp	r3, #0
 800122c:	d043      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001234:	2b00      	cmp	r3, #0
 8001236:	d03e      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800123e:	2b60      	cmp	r3, #96	; 0x60
 8001240:	d02b      	beq.n	800129a <HAL_CAN_IRQHandler+0x32a>
 8001242:	2b60      	cmp	r3, #96	; 0x60
 8001244:	d82e      	bhi.n	80012a4 <HAL_CAN_IRQHandler+0x334>
 8001246:	2b50      	cmp	r3, #80	; 0x50
 8001248:	d022      	beq.n	8001290 <HAL_CAN_IRQHandler+0x320>
 800124a:	2b50      	cmp	r3, #80	; 0x50
 800124c:	d82a      	bhi.n	80012a4 <HAL_CAN_IRQHandler+0x334>
 800124e:	2b40      	cmp	r3, #64	; 0x40
 8001250:	d019      	beq.n	8001286 <HAL_CAN_IRQHandler+0x316>
 8001252:	2b40      	cmp	r3, #64	; 0x40
 8001254:	d826      	bhi.n	80012a4 <HAL_CAN_IRQHandler+0x334>
 8001256:	2b30      	cmp	r3, #48	; 0x30
 8001258:	d010      	beq.n	800127c <HAL_CAN_IRQHandler+0x30c>
 800125a:	2b30      	cmp	r3, #48	; 0x30
 800125c:	d822      	bhi.n	80012a4 <HAL_CAN_IRQHandler+0x334>
 800125e:	2b10      	cmp	r3, #16
 8001260:	d002      	beq.n	8001268 <HAL_CAN_IRQHandler+0x2f8>
 8001262:	2b20      	cmp	r3, #32
 8001264:	d005      	beq.n	8001272 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001266:	e01d      	b.n	80012a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001270:	e019      	b.n	80012a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800127a:	e014      	b.n	80012a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001284:	e00f      	b.n	80012a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800128e:	e00a      	b.n	80012a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001298:	e005      	b.n	80012a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012a2:	e000      	b.n	80012a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80012a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	699a      	ldr	r2, [r3, #24]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2204      	movs	r2, #4
 80012bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f872 	bl	80013ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <__NVIC_EnableIRQ+0x38>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff29 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff3e 	bl	8001418 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff8e 	bl	80014c4 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff31 	bl	8001434 <__NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ffa2 	bl	800152c <SysTick_Config>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e154      	b.n	80018ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2101      	movs	r1, #1
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8146 	beq.w	80018a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d00b      	beq.n	800163c <HAL_GPIO_Init+0x48>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001630:	2b11      	cmp	r3, #17
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b12      	cmp	r3, #18
 800163a:	d130      	bne.n	800169e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001672:	2201      	movs	r2, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 0201 	and.w	r2, r3, #1
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0xea>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d123      	bne.n	8001726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691a      	ldr	r2, [r3, #16]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	6939      	ldr	r1, [r7, #16]
 8001722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2203      	movs	r2, #3
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0203 	and.w	r2, r3, #3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80a0 	beq.w	80018a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <HAL_GPIO_Init+0x2d8>)
 800176a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_GPIO_Init+0x2d8>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6613      	str	r3, [r2, #96]	; 0x60
 8001774:	4b55      	ldr	r3, [pc, #340]	; (80018cc <HAL_GPIO_Init+0x2d8>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001780:	4a53      	ldr	r2, [pc, #332]	; (80018d0 <HAL_GPIO_Init+0x2dc>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017aa:	d019      	beq.n	80017e0 <HAL_GPIO_Init+0x1ec>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <HAL_GPIO_Init+0x2e0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <HAL_GPIO_Init+0x1e8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a48      	ldr	r2, [pc, #288]	; (80018d8 <HAL_GPIO_Init+0x2e4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_GPIO_Init+0x1e4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a47      	ldr	r2, [pc, #284]	; (80018dc <HAL_GPIO_Init+0x2e8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0x1e0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a46      	ldr	r2, [pc, #280]	; (80018e0 <HAL_GPIO_Init+0x2ec>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_GPIO_Init+0x1dc>
 80017cc:	2304      	movs	r3, #4
 80017ce:	e008      	b.n	80017e2 <HAL_GPIO_Init+0x1ee>
 80017d0:	2307      	movs	r3, #7
 80017d2:	e006      	b.n	80017e2 <HAL_GPIO_Init+0x1ee>
 80017d4:	2303      	movs	r3, #3
 80017d6:	e004      	b.n	80017e2 <HAL_GPIO_Init+0x1ee>
 80017d8:	2302      	movs	r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x1ee>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_GPIO_Init+0x1ee>
 80017e0:	2300      	movs	r3, #0
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	f002 0203 	and.w	r2, r2, #3
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	4093      	lsls	r3, r2
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f2:	4937      	ldr	r1, [pc, #220]	; (80018d0 <HAL_GPIO_Init+0x2dc>)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001824:	4a2f      	ldr	r2, [pc, #188]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f47f aea3 	bne.w	8001604 <HAL_GPIO_Init+0x10>
  }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000c00 	.word	0x48000c00
 80018e0:	48001000 	.word	0x48001000
 80018e4:	40010400 	.word	0x40010400

080018e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001904:	e002      	b.n	800190c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <HAL_PWREx_GetVoltageRange+0x18>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40007000 	.word	0x40007000

08001934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001942:	d130      	bne.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800194c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001950:	d038      	beq.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001960:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2232      	movs	r2, #50	; 0x32
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9b      	lsrs	r3, r3, #18
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001978:	e002      	b.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3b01      	subs	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198c:	d102      	bne.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x60>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f2      	bne.n	800197a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a0:	d110      	bne.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e00f      	b.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	d007      	beq.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019bc:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40007000 	.word	0x40007000
 80019d8:	20000000 	.word	0x20000000
 80019dc:	431bde83 	.word	0x431bde83

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f000 bc11 	b.w	8002216 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f4:	4ba0      	ldr	r3, [pc, #640]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019fe:	4b9e      	ldr	r3, [pc, #632]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80e4 	beq.w	8001bde <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d007      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4c>
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	f040 808b 	bne.w	8001b3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	f040 8087 	bne.w	8001b3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a2c:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_OscConfig+0x64>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e3e8      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1a      	ldr	r2, [r3, #32]
 8001a48:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <HAL_RCC_OscConfig+0x7e>
 8001a54:	4b88      	ldr	r3, [pc, #544]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5c:	e005      	b.n	8001a6a <HAL_RCC_OscConfig+0x8a>
 8001a5e:	4b86      	ldr	r3, [pc, #536]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d223      	bcs.n	8001ab6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fd42 	bl	80024fc <RCC_SetFlashLatencyFromMSIRange>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e3c9      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a82:	4b7d      	ldr	r3, [pc, #500]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7c      	ldr	r2, [pc, #496]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b7a      	ldr	r3, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4977      	ldr	r1, [pc, #476]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa0:	4b75      	ldr	r3, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	4972      	ldr	r1, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e025      	b.n	8001b02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab6:	4b70      	ldr	r3, [pc, #448]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6f      	ldr	r2, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	496a      	ldr	r1, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	4965      	ldr	r1, [pc, #404]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 fd02 	bl	80024fc <RCC_SetFlashLatencyFromMSIRange>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e389      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b02:	f000 fc6f 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	495a      	ldr	r1, [pc, #360]	; (8001c7c <HAL_RCC_OscConfig+0x29c>)
 8001b14:	5ccb      	ldrb	r3, [r1, r3]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_OscConfig+0x2a0>)
 8001b20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b22:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <HAL_RCC_OscConfig+0x2a4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fdaa 	bl	8000680 <HAL_InitTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d052      	beq.n	8001bdc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	e36d      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d032      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b42:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a4c      	ldr	r2, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b4e:	f7fe fde7 	bl	8000720 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b56:	f7fe fde3 	bl	8000720 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e356      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b68:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b74:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a3f      	ldr	r2, [pc, #252]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	493a      	ldr	r1, [pc, #232]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b92:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	4935      	ldr	r1, [pc, #212]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
 8001ba6:	e01a      	b.n	8001bde <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a32      	ldr	r2, [pc, #200]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe fdb4 	bl	8000720 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bbc:	f7fe fdb0 	bl	8000720 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e323      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1dc>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d073      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_OscConfig+0x21c>
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d10e      	bne.n	8001c14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d10b      	bne.n	8001c14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d063      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d15f      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e300      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d106      	bne.n	8001c2c <HAL_RCC_OscConfig+0x24c>
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_RCC_OscConfig+0x288>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x270>
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0x288>
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <HAL_RCC_OscConfig+0x298>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01b      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7fe fd56 	bl	8000720 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c76:	e010      	b.n	8001c9a <HAL_RCC_OscConfig+0x2ba>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	0800263c 	.word	0x0800263c
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7fe fd4a 	bl	8000720 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e2bd      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9a:	4baf      	ldr	r3, [pc, #700]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x2a8>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7fe fd3a 	bl	8000720 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7fe fd36 	bl	8000720 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e2a9      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc2:	4ba5      	ldr	r3, [pc, #660]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2d0>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d060      	beq.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x310>
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d119      	bne.n	8001d1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d116      	bne.n	8001d1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf0:	4b99      	ldr	r3, [pc, #612]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_OscConfig+0x328>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e286      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b93      	ldr	r3, [pc, #588]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	4990      	ldr	r1, [pc, #576]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d1c:	e040      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d023      	beq.n	8001d6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d26:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a8b      	ldr	r2, [pc, #556]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7fe fcf5 	bl	8000720 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7fe fcf1 	bl	8000720 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e264      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4c:	4b82      	ldr	r3, [pc, #520]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b7f      	ldr	r3, [pc, #508]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	061b      	lsls	r3, r3, #24
 8001d66:	497c      	ldr	r1, [pc, #496]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
 8001d6c:	e018      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b7a      	ldr	r3, [pc, #488]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a79      	ldr	r2, [pc, #484]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fcd1 	bl	8000720 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7fe fccd 	bl	8000720 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e240      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d94:	4b70      	ldr	r3, [pc, #448]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d03c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01c      	beq.n	8001dee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dba:	4a67      	ldr	r2, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7fe fcac 	bl	8000720 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7fe fca8 	bl	8000720 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e21b      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dde:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ef      	beq.n	8001dcc <HAL_RCC_OscConfig+0x3ec>
 8001dec:	e01b      	b.n	8001e26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dee:	4b5a      	ldr	r3, [pc, #360]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7fe fc8f 	bl	8000720 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e06:	f7fe fc8b 	bl	8000720 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1fe      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e18:	4b4f      	ldr	r3, [pc, #316]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ef      	bne.n	8001e06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80a6 	beq.w	8001f80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e38:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10d      	bne.n	8001e60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e44:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	4a43      	ldr	r2, [pc, #268]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e50:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e60:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <HAL_RCC_OscConfig+0x57c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d118      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_RCC_OscConfig+0x57c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3a      	ldr	r2, [pc, #232]	; (8001f5c <HAL_RCC_OscConfig+0x57c>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e78:	f7fe fc52 	bl	8000720 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e80:	f7fe fc4e 	bl	8000720 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e1c1      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e92:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_RCC_OscConfig+0x57c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d108      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4d8>
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eac:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb6:	e024      	b.n	8001f02 <HAL_RCC_OscConfig+0x522>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d110      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x502>
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee0:	e00f      	b.n	8001f02 <HAL_RCC_OscConfig+0x522>
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef8:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7fe fc09 	bl	8000720 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7fe fc05 	bl	8000720 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e176      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ed      	beq.n	8001f12 <HAL_RCC_OscConfig+0x532>
 8001f36:	e01a      	b.n	8001f6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7fe fbf2 	bl	8000720 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f3e:	e00f      	b.n	8001f60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f7fe fbee 	bl	8000720 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d906      	bls.n	8001f60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e15f      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f60:	4baa      	ldr	r3, [pc, #680]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1e8      	bne.n	8001f40 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f74:	4ba5      	ldr	r3, [pc, #660]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	4aa4      	ldr	r2, [pc, #656]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8001f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d03c      	beq.n	8002006 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01c      	beq.n	8001fce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f94:	4b9d      	ldr	r3, [pc, #628]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8001f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f9a:	4a9c      	ldr	r2, [pc, #624]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7fe fbbc 	bl	8000720 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fac:	f7fe fbb8 	bl	8000720 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e12b      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fbe:	4b93      	ldr	r3, [pc, #588]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8001fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ef      	beq.n	8001fac <HAL_RCC_OscConfig+0x5cc>
 8001fcc:	e01b      	b.n	8002006 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fce:	4b8f      	ldr	r3, [pc, #572]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8001fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fd4:	4a8d      	ldr	r2, [pc, #564]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7fe fb9f 	bl	8000720 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe6:	f7fe fb9b 	bl	8000720 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e10e      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ff8:	4b84      	ldr	r3, [pc, #528]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8001ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ef      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8102 	beq.w	8002214 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	2b02      	cmp	r3, #2
 8002016:	f040 80c5 	bne.w	80021a4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800201a:	4b7c      	ldr	r3, [pc, #496]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0203 	and.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	429a      	cmp	r2, r3
 800202c:	d12c      	bne.n	8002088 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	3b01      	subs	r3, #1
 800203a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d123      	bne.n	8002088 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d11b      	bne.n	8002088 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d113      	bne.n	8002088 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	3b01      	subs	r3, #1
 800206e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d109      	bne.n	8002088 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	3b01      	subs	r3, #1
 8002082:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d067      	beq.n	8002158 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d062      	beq.n	8002154 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800208e:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0bb      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800209e:	4b5b      	ldr	r3, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a5a      	ldr	r2, [pc, #360]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80020a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020aa:	f7fe fb39 	bl	8000720 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fb35 	bl	8000720 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0a8      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c4:	4b51      	ldr	r3, [pc, #324]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d0:	4b4e      	ldr	r3, [pc, #312]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <HAL_RCC_OscConfig+0x830>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020e0:	3a01      	subs	r2, #1
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	4311      	orrs	r1, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020ea:	0212      	lsls	r2, r2, #8
 80020ec:	4311      	orrs	r1, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020f2:	0852      	lsrs	r2, r2, #1
 80020f4:	3a01      	subs	r2, #1
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	4311      	orrs	r1, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020fe:	0852      	lsrs	r2, r2, #1
 8002100:	3a01      	subs	r2, #1
 8002102:	0652      	lsls	r2, r2, #25
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800210a:	06d2      	lsls	r2, r2, #27
 800210c:	430a      	orrs	r2, r1
 800210e:	493f      	ldr	r1, [pc, #252]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a3c      	ldr	r2, [pc, #240]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002120:	4b3a      	ldr	r3, [pc, #232]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a39      	ldr	r2, [pc, #228]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800212c:	f7fe faf8 	bl	8000720 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe faf4 	bl	8000720 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e067      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002146:	4b31      	ldr	r3, [pc, #196]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002152:	e05f      	b.n	8002214 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e05e      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002158:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d157      	bne.n	8002214 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a28      	ldr	r2, [pc, #160]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 800216a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002170:	4b26      	ldr	r3, [pc, #152]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a25      	ldr	r2, [pc, #148]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800217c:	f7fe fad0 	bl	8000720 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7fe facc 	bl	8000720 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e03f      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x7a4>
 80021a2:	e037      	b.n	8002214 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d02d      	beq.n	8002206 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80021b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80021c8:	f023 0303 	bic.w	r3, r3, #3
 80021cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80021d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7fe fa9f 	bl	8000720 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fa9b 	bl	8000720 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e00e      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_RCC_OscConfig+0x82c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x806>
 8002204:	e006      	b.n	8002214 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e005      	b.n	8002216 <HAL_RCC_OscConfig+0x836>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop

08002220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0c8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002234:	4b66      	ldr	r3, [pc, #408]	; (80023d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d910      	bls.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4961      	ldr	r1, [pc, #388]	; (80023d0 <HAL_RCC_ClockConfig+0x1b0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b5f      	ldr	r3, [pc, #380]	; (80023d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b0      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d04c      	beq.n	800230a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d107      	bne.n	8002288 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002278:	4b56      	ldr	r3, [pc, #344]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d121      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e09e      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d115      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e092      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a8:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e086      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b8:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e07e      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c8:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 0203 	bic.w	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	493f      	ldr	r1, [pc, #252]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022da:	f7fe fa21 	bl	8000720 <HAL_GetTick>
 80022de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e2:	f7fe fa1d 	bl	8000720 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e066      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 020c 	and.w	r2, r3, #12
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	429a      	cmp	r2, r3
 8002308:	d1eb      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	492c      	ldr	r1, [pc, #176]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <HAL_RCC_ClockConfig+0x1b0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d210      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 0207 	bic.w	r2, r3, #7
 800233e:	4924      	ldr	r1, [pc, #144]	; (80023d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e036      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4918      	ldr	r1, [pc, #96]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4910      	ldr	r1, [pc, #64]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002396:	f000 f825 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_RCC_ClockConfig+0x1b4>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490c      	ldr	r1, [pc, #48]	; (80023d8 <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f960 	bl	8000680 <HAL_InitTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80023c4:	7afb      	ldrb	r3, [r7, #11]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40022000 	.word	0x40022000
 80023d4:	40021000 	.word	0x40021000
 80023d8:	0800263c 	.word	0x0800263c
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000004 	.word	0x20000004

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f2:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <HAL_RCC_GetSysClockFreq+0x108>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023fc:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x34>
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d121      	bne.n	8002456 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d11e      	bne.n	8002456 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002418:	4b34      	ldr	r3, [pc, #208]	; (80024ec <HAL_RCC_GetSysClockFreq+0x108>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e005      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002440:	4a2b      	ldr	r2, [pc, #172]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10d      	bne.n	800246c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002454:	e00a      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d102      	bne.n	8002462 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	e004      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d101      	bne.n	800246c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002468:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800246a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d134      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d003      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0xa6>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d003      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0xac>
 8002488:	e005      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800248c:	617b      	str	r3, [r7, #20]
      break;
 800248e:	e005      	b.n	800249c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002492:	617b      	str	r3, [r7, #20]
      break;
 8002494:	e002      	b.n	800249c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	617b      	str	r3, [r7, #20]
      break;
 800249a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_RCC_GetSysClockFreq+0x108>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	3301      	adds	r3, #1
 80024a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCC_GetSysClockFreq+0x108>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	fb02 f203 	mul.w	r2, r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_RCC_GetSysClockFreq+0x108>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	0e5b      	lsrs	r3, r3, #25
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	3301      	adds	r3, #1
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024dc:	69bb      	ldr	r3, [r7, #24]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	0800264c 	.word	0x0800264c
 80024f4:	00f42400 	.word	0x00f42400
 80024f8:	007a1200 	.word	0x007a1200

080024fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002514:	f7ff fa00 	bl	8001918 <HAL_PWREx_GetVoltageRange>
 8002518:	6178      	str	r0, [r7, #20]
 800251a:	e014      	b.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002526:	6593      	str	r3, [r2, #88]	; 0x58
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002534:	f7ff f9f0 	bl	8001918 <HAL_PWREx_GetVoltageRange>
 8002538:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002544:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254c:	d10b      	bne.n	8002566 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b80      	cmp	r3, #128	; 0x80
 8002552:	d919      	bls.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2ba0      	cmp	r3, #160	; 0xa0
 8002558:	d902      	bls.n	8002560 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800255a:	2302      	movs	r3, #2
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	e013      	b.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002560:	2301      	movs	r3, #1
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	e010      	b.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d902      	bls.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800256c:	2303      	movs	r3, #3
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	e00a      	b.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b80      	cmp	r3, #128	; 0x80
 8002576:	d102      	bne.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002578:	2302      	movs	r3, #2
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	e004      	b.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b70      	cmp	r3, #112	; 0x70
 8002582:	d101      	bne.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002584:	2301      	movs	r3, #1
 8002586:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 0207 	bic.w	r2, r3, #7
 8002590:	4909      	ldr	r1, [pc, #36]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40022000 	.word	0x40022000

080025bc <__libc_init_array>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	4d0d      	ldr	r5, [pc, #52]	; (80025f4 <__libc_init_array+0x38>)
 80025c0:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <__libc_init_array+0x3c>)
 80025c2:	1b64      	subs	r4, r4, r5
 80025c4:	10a4      	asrs	r4, r4, #2
 80025c6:	2600      	movs	r6, #0
 80025c8:	42a6      	cmp	r6, r4
 80025ca:	d109      	bne.n	80025e0 <__libc_init_array+0x24>
 80025cc:	4d0b      	ldr	r5, [pc, #44]	; (80025fc <__libc_init_array+0x40>)
 80025ce:	4c0c      	ldr	r4, [pc, #48]	; (8002600 <__libc_init_array+0x44>)
 80025d0:	f000 f820 	bl	8002614 <_init>
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	2600      	movs	r6, #0
 80025da:	42a6      	cmp	r6, r4
 80025dc:	d105      	bne.n	80025ea <__libc_init_array+0x2e>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e4:	4798      	blx	r3
 80025e6:	3601      	adds	r6, #1
 80025e8:	e7ee      	b.n	80025c8 <__libc_init_array+0xc>
 80025ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ee:	4798      	blx	r3
 80025f0:	3601      	adds	r6, #1
 80025f2:	e7f2      	b.n	80025da <__libc_init_array+0x1e>
 80025f4:	0800267c 	.word	0x0800267c
 80025f8:	0800267c 	.word	0x0800267c
 80025fc:	0800267c 	.word	0x0800267c
 8002600:	08002680 	.word	0x08002680

08002604 <memset>:
 8002604:	4402      	add	r2, r0
 8002606:	4603      	mov	r3, r0
 8002608:	4293      	cmp	r3, r2
 800260a:	d100      	bne.n	800260e <memset+0xa>
 800260c:	4770      	bx	lr
 800260e:	f803 1b01 	strb.w	r1, [r3], #1
 8002612:	e7f9      	b.n	8002608 <memset+0x4>

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr
