
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e9c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002028  08002028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002078  08002078  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002078  08002078  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002078  08002078  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800208c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800208c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d5c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001447  00000000  00000000  00027d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  000291e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  00029900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4df  00000000  00000000  00029f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079d0  00000000  00000000  00049457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdee9  00000000  00000000  00050e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ed10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ba8  00000000  00000000  0010ed64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002010 	.word	0x08002010

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002010 	.word	0x08002010

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b590      	push	{r4, r7, lr}
 80001ce:	b089      	sub	sp, #36	; 0x24
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa1c 	bl	800060e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f867 	bl	80002a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	2102      	movs	r1, #2
 80001de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e2:	f000 fd0d 	bl	8000c00 <HAL_GPIO_WritePin>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e6:	f000 f8e3 	bl	80003b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001ea:	f000 f8a3 	bl	8000334 <MX_SPI1_Init>
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  // Example data to write
	  uint8_t data_to_write[] = "Hello, World!";
 80001ee:	4b2c      	ldr	r3, [pc, #176]	; (80002a0 <main+0xd4>)
 80001f0:	f107 040c 	add.w	r4, r7, #12
 80001f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f6:	c407      	stmia	r4!, {r0, r1, r2}
 80001f8:	8023      	strh	r3, [r4, #0]
	  uint32_t address = 0x000000; // Address to write the data to
 80001fa:	2300      	movs	r3, #0
 80001fc:	61fb      	str	r3, [r7, #28]

	  // Enable write operations
	  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET); // Select the flash chip
 80001fe:	2200      	movs	r2, #0
 8000200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000208:	f000 fcfa 	bl	8000c00 <HAL_GPIO_WritePin>
	  uint8_t cmd_enable_write = CMD_WRITE_ENABLE;
 800020c:	2306      	movs	r3, #6
 800020e:	72fb      	strb	r3, [r7, #11]
	  HAL_SPI_Transmit(&hspi1, &cmd_enable_write, 1, HAL_MAX_DELAY);
 8000210:	f107 010b 	add.w	r1, r7, #11
 8000214:	f04f 33ff 	mov.w	r3, #4294967295
 8000218:	2201      	movs	r2, #1
 800021a:	4822      	ldr	r0, [pc, #136]	; (80002a4 <main+0xd8>)
 800021c:	f001 fbfd 	bl	8001a1a <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET); // Deselect the flash chip
 8000220:	2201      	movs	r2, #1
 8000222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022a:	f000 fce9 	bl	8000c00 <HAL_GPIO_WritePin>

	  HAL_Delay(10); // Small delay before next operation
 800022e:	200a      	movs	r0, #10
 8000230:	f000 fa62 	bl	80006f8 <HAL_Delay>

	  // Write data to flash
	  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET); // Select the flash chip
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800023a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023e:	f000 fcdf 	bl	8000c00 <HAL_GPIO_WritePin>
	  uint8_t cmd_page_program = CMD_PAGE_PROGRAM;
 8000242:	2302      	movs	r3, #2
 8000244:	72bb      	strb	r3, [r7, #10]
	  HAL_SPI_Transmit(&hspi1, &cmd_page_program, 1, HAL_MAX_DELAY); // Send page program command
 8000246:	f107 010a 	add.w	r1, r7, #10
 800024a:	f04f 33ff 	mov.w	r3, #4294967295
 800024e:	2201      	movs	r2, #1
 8000250:	4814      	ldr	r0, [pc, #80]	; (80002a4 <main+0xd8>)
 8000252:	f001 fbe2 	bl	8001a1a <HAL_SPI_Transmit>

	  uint8_t address_bytes[3];
	  address_bytes[0] = (address >> 16) & 0xFF; // Most significant byte
 8000256:	69fb      	ldr	r3, [r7, #28]
 8000258:	0c1b      	lsrs	r3, r3, #16
 800025a:	b2db      	uxtb	r3, r3
 800025c:	713b      	strb	r3, [r7, #4]
	  address_bytes[1] = (address >> 8) & 0xFF;  // Mid byte
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	b2db      	uxtb	r3, r3
 8000264:	717b      	strb	r3, [r7, #5]
	  address_bytes[2] = address & 0xFF;         // Least significant byte
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	71bb      	strb	r3, [r7, #6]
	  HAL_SPI_Transmit(&hspi1, address_bytes, 3, HAL_MAX_DELAY); // Send address
 800026c:	1d39      	adds	r1, r7, #4
 800026e:	f04f 33ff 	mov.w	r3, #4294967295
 8000272:	2203      	movs	r2, #3
 8000274:	480b      	ldr	r0, [pc, #44]	; (80002a4 <main+0xd8>)
 8000276:	f001 fbd0 	bl	8001a1a <HAL_SPI_Transmit>

	  HAL_SPI_Transmit(&hspi1, data_to_write, sizeof(data_to_write), HAL_MAX_DELAY); // Send data
 800027a:	f107 010c 	add.w	r1, r7, #12
 800027e:	f04f 33ff 	mov.w	r3, #4294967295
 8000282:	220e      	movs	r2, #14
 8000284:	4807      	ldr	r0, [pc, #28]	; (80002a4 <main+0xd8>)
 8000286:	f001 fbc8 	bl	8001a1a <HAL_SPI_Transmit>

	  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET); // Deselect the flash chip
 800028a:	2201      	movs	r2, #1
 800028c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000294:	f000 fcb4 	bl	8000c00 <HAL_GPIO_WritePin>

	  // Wait for write operation to complete
	  HAL_Delay(10); // You may need to adjust the delay based on flash memory specifications
 8000298:	200a      	movs	r0, #10
 800029a:	f000 fa2d 	bl	80006f8 <HAL_Delay>
  {
 800029e:	e7a6      	b.n	80001ee <main+0x22>
 80002a0:	08002028 	.word	0x08002028
 80002a4:	20000028 	.word	0x20000028

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b096      	sub	sp, #88	; 0x58
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	2244      	movs	r2, #68	; 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fea2 	bl	8002000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ce:	f000 fcbd 	bl	8000c4c <HAL_PWREx_ControlVoltageScaling>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002d8:	f000 f8a8 	bl	800042c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002dc:	2310      	movs	r3, #16
 80002de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002e8:	2360      	movs	r3, #96	; 0x60
 80002ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ec:	2300      	movs	r3, #0
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	f107 0314 	add.w	r3, r7, #20
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fcff 	bl	8000cf8 <HAL_RCC_OscConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000300:	f000 f894 	bl	800042c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	230f      	movs	r3, #15
 8000306:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000308:	2300      	movs	r3, #0
 800030a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000318:	463b      	mov	r3, r7
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f001 f90b 	bl	8001538 <HAL_RCC_ClockConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000328:	f000 f880 	bl	800042c <Error_Handler>
  }
}
 800032c:	bf00      	nop
 800032e:	3758      	adds	r7, #88	; 0x58
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_SPI1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_SPI1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_SPI1_Init+0x74>)
 800034e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_SPI1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000366:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_SPI1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_SPI1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000382:	2207      	movs	r2, #7
 8000384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_SPI1_Init+0x74>)
 800038e:	2208      	movs	r2, #8
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000394:	f001 fa9e 	bl	80018d4 <HAL_SPI_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f845 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000028 	.word	0x20000028
 80003ac:	40013000 	.word	0x40013000

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <MX_GPIO_Init+0x74>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a16      	ldr	r2, [pc, #88]	; (8000424 <MX_GPIO_Init+0x74>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_GPIO_Init+0x74>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_GPIO_Init+0x74>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	4a10      	ldr	r2, [pc, #64]	; (8000424 <MX_GPIO_Init+0x74>)
 80003e4:	f043 0302 	orr.w	r3, r3, #2
 80003e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_GPIO_Init+0x74>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	f003 0302 	and.w	r3, r3, #2
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2101      	movs	r1, #1
 80003fa:	480b      	ldr	r0, [pc, #44]	; (8000428 <MX_GPIO_Init+0x78>)
 80003fc:	f000 fc00 	bl	8000c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000400:	2301      	movs	r3, #1
 8000402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	4619      	mov	r1, r3
 8000416:	4804      	ldr	r0, [pc, #16]	; (8000428 <MX_GPIO_Init+0x78>)
 8000418:	f000 fa78 	bl	800090c <HAL_GPIO_Init>

}
 800041c:	bf00      	nop
 800041e:	3720      	adds	r7, #32
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	48000400 	.word	0x48000400

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	e7fe      	b.n	8000434 <Error_Handler+0x8>
	...

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <HAL_MspInit+0x44>)
 8000440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <HAL_MspInit+0x44>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6613      	str	r3, [r2, #96]	; 0x60
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <HAL_MspInit+0x44>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <HAL_MspInit+0x44>)
 8000458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045a:	4a08      	ldr	r2, [pc, #32]	; (800047c <HAL_MspInit+0x44>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	6593      	str	r3, [r2, #88]	; 0x58
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <HAL_MspInit+0x44>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08a      	sub	sp, #40	; 0x28
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a17      	ldr	r2, [pc, #92]	; (80004fc <HAL_SPI_MspInit+0x7c>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d128      	bne.n	80004f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <HAL_SPI_MspInit+0x80>)
 80004a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a6:	4a16      	ldr	r2, [pc, #88]	; (8000500 <HAL_SPI_MspInit+0x80>)
 80004a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ac:	6613      	str	r3, [r2, #96]	; 0x60
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <HAL_SPI_MspInit+0x80>)
 80004b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004b6:	613b      	str	r3, [r7, #16]
 80004b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <HAL_SPI_MspInit+0x80>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <HAL_SPI_MspInit+0x80>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_SPI_MspInit+0x80>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004d2:	23e0      	movs	r3, #224	; 0xe0
 80004d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004de:	2303      	movs	r3, #3
 80004e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004e2:	2305      	movs	r3, #5
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4619      	mov	r1, r3
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f0:	f000 fa0c 	bl	800090c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3728      	adds	r7, #40	; 0x28
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40013000 	.word	0x40013000
 8000500:	40021000 	.word	0x40021000

08000504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <NMI_Handler+0x4>

0800050a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <HardFault_Handler+0x4>

08000510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <MemManage_Handler+0x4>

08000516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <BusFault_Handler+0x4>

0800051c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <UsageFault_Handler+0x4>

08000522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000550:	f000 f8b2 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <SystemInit+0x5c>)
 800055e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <SystemInit+0x5c>)
 8000564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <SystemInit+0x60>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <SystemInit+0x60>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <SystemInit+0x60>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <SystemInit+0x60>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <SystemInit+0x60>)
 8000584:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000588:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800058c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <SystemInit+0x60>)
 8000590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000594:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <SystemInit+0x60>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <SystemInit+0x60>)
 800059c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <SystemInit+0x60>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000ed00 	.word	0xe000ed00
 80005b8:	40021000 	.word	0x40021000

080005bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c0:	f7ff ffca 	bl	8000558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
	ldr	r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <LoopForever+0x16>)
	cmp	r2, r3
 80005e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ea:	f001 fce5 	bl	8001fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ee:	f7ff fded 	bl	80001cc <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005f4:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80005f8:	08002080 	.word	0x08002080
	ldr	r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000600:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000604:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000608:	20000090 	.word	0x20000090

0800060c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_IRQHandler>

0800060e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000614:	2300      	movs	r3, #0
 8000616:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f943 	bl	80008a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	200f      	movs	r0, #15
 8000620:	f000 f80e 	bl	8000640 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	e001      	b.n	8000634 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000630:	f7ff ff02 	bl	8000438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000634:	79fb      	ldrb	r3, [r7, #7]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_InitTick+0x6c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d023      	beq.n	800069c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_InitTick+0x70>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_InitTick+0x6c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000662:	fbb3 f3f1 	udiv	r3, r3, r1
 8000666:	fbb2 f3f3 	udiv	r3, r2, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f941 	bl	80008f2 <HAL_SYSTICK_Config>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10f      	bne.n	8000696 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d809      	bhi.n	8000690 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f000 f919 	bl	80008ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000688:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <HAL_InitTick+0x74>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	e007      	b.n	80006a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	e004      	b.n	80006a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	e001      	b.n	80006a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800069c:	2301      	movs	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x20>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x24>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_IncTick+0x24>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000008 	.word	0x20000008
 80006dc:	2000008c 	.word	0x2000008c

080006e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_GetTick+0x14>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2000008c 	.word	0x2000008c

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff ffee 	bl	80006e0 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000710:	d005      	beq.n	800071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_Delay+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071e:	bf00      	nop
 8000720:	f7ff ffde 	bl	80006e0 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f7      	bhi.n	8000720 <HAL_Delay+0x28>
  {
  }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000870:	d301      	bcc.n	8000876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2301      	movs	r3, #1
 8000874:	e00f      	b.n	8000896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <SysTick_Config+0x40>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087e:	210f      	movs	r1, #15
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f7ff ff8e 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <SysTick_Config+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SysTick_Config+0x40>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff47 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008cc:	f7ff ff5c 	bl	8000788 <__NVIC_GetPriorityGrouping>
 80008d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff8e 	bl	80007f8 <NVIC_EncodePriority>
 80008dc:	4602      	mov	r2, r0
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff5d 	bl	80007a4 <__NVIC_SetPriority>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ffb0 	bl	8000860 <SysTick_Config>
 8000900:	4603      	mov	r3, r0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800090c:	b480      	push	{r7}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e154      	b.n	8000bc6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2101      	movs	r1, #1
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	f000 8146 	beq.w	8000bc0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d00b      	beq.n	8000954 <HAL_GPIO_Init+0x48>
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d007      	beq.n	8000954 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000948:	2b11      	cmp	r3, #17
 800094a:	d003      	beq.n	8000954 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b12      	cmp	r3, #18
 8000952:	d130      	bne.n	80009b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800098a:	2201      	movs	r2, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	f003 0201 	and.w	r2, r3, #1
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2203      	movs	r2, #3
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0xea>
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d123      	bne.n	8000a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	08da      	lsrs	r2, r3, #3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3208      	adds	r2, #8
 80009fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	691a      	ldr	r2, [r3, #16]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	08da      	lsrs	r2, r3, #3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3208      	adds	r2, #8
 8000a38:	6939      	ldr	r1, [r7, #16]
 8000a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0203 	and.w	r2, r3, #3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 80a0 	beq.w	8000bc0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a80:	4b58      	ldr	r3, [pc, #352]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a84:	4a57      	ldr	r2, [pc, #348]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8c:	4b55      	ldr	r3, [pc, #340]	; (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a98:	4a53      	ldr	r2, [pc, #332]	; (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	220f      	movs	r2, #15
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac2:	d019      	beq.n	8000af8 <HAL_GPIO_Init+0x1ec>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a49      	ldr	r2, [pc, #292]	; (8000bec <HAL_GPIO_Init+0x2e0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d013      	beq.n	8000af4 <HAL_GPIO_Init+0x1e8>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <HAL_GPIO_Init+0x2e4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <HAL_GPIO_Init+0x1e4>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a47      	ldr	r2, [pc, #284]	; (8000bf4 <HAL_GPIO_Init+0x2e8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x1e0>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a46      	ldr	r2, [pc, #280]	; (8000bf8 <HAL_GPIO_Init+0x2ec>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <HAL_GPIO_Init+0x1dc>
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	e008      	b.n	8000afa <HAL_GPIO_Init+0x1ee>
 8000ae8:	2307      	movs	r3, #7
 8000aea:	e006      	b.n	8000afa <HAL_GPIO_Init+0x1ee>
 8000aec:	2303      	movs	r3, #3
 8000aee:	e004      	b.n	8000afa <HAL_GPIO_Init+0x1ee>
 8000af0:	2302      	movs	r3, #2
 8000af2:	e002      	b.n	8000afa <HAL_GPIO_Init+0x1ee>
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <HAL_GPIO_Init+0x1ee>
 8000af8:	2300      	movs	r3, #0
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	f002 0203 	and.w	r2, r2, #3
 8000b00:	0092      	lsls	r2, r2, #2
 8000b02:	4093      	lsls	r3, r2
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b0a:	4937      	ldr	r1, [pc, #220]	; (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	3302      	adds	r3, #2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b18:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <HAL_GPIO_Init+0x2f0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <HAL_GPIO_Init+0x2f0>)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <HAL_GPIO_Init+0x2f0>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b66:	4a25      	ldr	r2, [pc, #148]	; (8000bfc <HAL_GPIO_Init+0x2f0>)
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <HAL_GPIO_Init+0x2f0>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_GPIO_Init+0x2f0>)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_GPIO_Init+0x2f0>)
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_GPIO_Init+0x2f0>)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f47f aea3 	bne.w	800091c <HAL_GPIO_Init+0x10>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	371c      	adds	r7, #28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010000 	.word	0x40010000
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	48000800 	.word	0x48000800
 8000bf4:	48000c00 	.word	0x48000c00
 8000bf8:	48001000 	.word	0x48001000
 8000bfc:	40010400 	.word	0x40010400

08000c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c1c:	e002      	b.n	8000c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40007000 	.word	0x40007000

08000c4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c5a:	d130      	bne.n	8000cbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c68:	d038      	beq.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c72:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2232      	movs	r2, #50	; 0x32
 8000c80:	fb02 f303 	mul.w	r3, r2, r3
 8000c84:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	0c9b      	lsrs	r3, r3, #18
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c90:	e002      	b.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca4:	d102      	bne.n	8000cac <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f2      	bne.n	8000c92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb8:	d110      	bne.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e00f      	b.n	8000cde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cca:	d007      	beq.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cd4:	4a05      	ldr	r2, [pc, #20]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40007000 	.word	0x40007000
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	431bde83 	.word	0x431bde83

08000cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	f000 bc11 	b.w	800152e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d0c:	4ba0      	ldr	r3, [pc, #640]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d16:	4b9e      	ldr	r3, [pc, #632]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80e4 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d007      	beq.n	8000d44 <HAL_RCC_OscConfig+0x4c>
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2b0c      	cmp	r3, #12
 8000d38:	f040 808b 	bne.w	8000e52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	f040 8087 	bne.w	8000e52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d44:	4b92      	ldr	r3, [pc, #584]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <HAL_RCC_OscConfig+0x64>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e3e8      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a1a      	ldr	r2, [r3, #32]
 8000d60:	4b8b      	ldr	r3, [pc, #556]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <HAL_RCC_OscConfig+0x7e>
 8000d6c:	4b88      	ldr	r3, [pc, #544]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d74:	e005      	b.n	8000d82 <HAL_RCC_OscConfig+0x8a>
 8000d76:	4b86      	ldr	r3, [pc, #536]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d223      	bcs.n	8000dce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fd42 	bl	8001814 <RCC_SetFlashLatencyFromMSIRange>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e3c9      	b.n	800152e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d9a:	4b7d      	ldr	r3, [pc, #500]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a7c      	ldr	r2, [pc, #496]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b7a      	ldr	r3, [pc, #488]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	4977      	ldr	r1, [pc, #476]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000db4:	4313      	orrs	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000db8:	4b75      	ldr	r3, [pc, #468]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	4972      	ldr	r1, [pc, #456]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]
 8000dcc:	e025      	b.n	8000e1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dce:	4b70      	ldr	r3, [pc, #448]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a6f      	ldr	r2, [pc, #444]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	496a      	ldr	r1, [pc, #424]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dec:	4b68      	ldr	r3, [pc, #416]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	4965      	ldr	r1, [pc, #404]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d109      	bne.n	8000e1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fd02 	bl	8001814 <RCC_SetFlashLatencyFromMSIRange>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e389      	b.n	800152e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e1a:	f000 fc6f 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	4b5b      	ldr	r3, [pc, #364]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	495a      	ldr	r1, [pc, #360]	; (8000f94 <HAL_RCC_OscConfig+0x29c>)
 8000e2c:	5ccb      	ldrb	r3, [r1, r3]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	fa22 f303 	lsr.w	r3, r2, r3
 8000e36:	4a58      	ldr	r2, [pc, #352]	; (8000f98 <HAL_RCC_OscConfig+0x2a0>)
 8000e38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e3a:	4b58      	ldr	r3, [pc, #352]	; (8000f9c <HAL_RCC_OscConfig+0x2a4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fbfe 	bl	8000640 <HAL_InitTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d052      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	e36d      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d032      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e5a:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e66:	f7ff fc3b 	bl	80006e0 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fc37 	bl	80006e0 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e356      	b.n	800152e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e80:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e8c:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a3f      	ldr	r2, [pc, #252]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	493a      	ldr	r1, [pc, #232]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	4935      	ldr	r1, [pc, #212]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	604b      	str	r3, [r1, #4]
 8000ebe:	e01a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ec0:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a32      	ldr	r2, [pc, #200]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fc08 	bl	80006e0 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fc04 	bl	80006e0 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e323      	b.n	800152e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x1dc>
 8000ef2:	e000      	b.n	8000ef6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d073      	beq.n	8000fea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d005      	beq.n	8000f14 <HAL_RCC_OscConfig+0x21c>
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	2b0c      	cmp	r3, #12
 8000f0c:	d10e      	bne.n	8000f2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d10b      	bne.n	8000f2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d063      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x2f0>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d15f      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e300      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f34:	d106      	bne.n	8000f44 <HAL_RCC_OscConfig+0x24c>
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e01d      	b.n	8000f80 <HAL_RCC_OscConfig+0x288>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x270>
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e00b      	b.n	8000f80 <HAL_RCC_OscConfig+0x288>
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <HAL_RCC_OscConfig+0x298>)
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d01b      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f88:	f7ff fbaa 	bl	80006e0 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f8e:	e010      	b.n	8000fb2 <HAL_RCC_OscConfig+0x2ba>
 8000f90:	40021000 	.word	0x40021000
 8000f94:	08002038 	.word	0x08002038
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fb9e 	bl	80006e0 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e2bd      	b.n	800152e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fb2:	4baf      	ldr	r3, [pc, #700]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x2a8>
 8000fbe:	e014      	b.n	8000fea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fb8e 	bl	80006e0 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fb8a 	bl	80006e0 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e2a9      	b.n	800152e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fda:	4ba5      	ldr	r3, [pc, #660]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x2d0>
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d060      	beq.n	80010b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_OscConfig+0x310>
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2b0c      	cmp	r3, #12
 8001000:	d119      	bne.n	8001036 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d116      	bne.n	8001036 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001008:	4b99      	ldr	r3, [pc, #612]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <HAL_RCC_OscConfig+0x328>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e286      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001020:	4b93      	ldr	r3, [pc, #588]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	061b      	lsls	r3, r3, #24
 800102e:	4990      	ldr	r1, [pc, #576]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001034:	e040      	b.n	80010b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d023      	beq.n	8001086 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103e:	4b8c      	ldr	r3, [pc, #560]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a8b      	ldr	r2, [pc, #556]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104a:	f7ff fb49 	bl	80006e0 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001052:	f7ff fb45 	bl	80006e0 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e264      	b.n	800152e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001064:	4b82      	ldr	r3, [pc, #520]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f0      	beq.n	8001052 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4b7f      	ldr	r3, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	061b      	lsls	r3, r3, #24
 800107e:	497c      	ldr	r1, [pc, #496]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
 8001084:	e018      	b.n	80010b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001086:	4b7a      	ldr	r3, [pc, #488]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a79      	ldr	r2, [pc, #484]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 800108c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001092:	f7ff fb25 	bl	80006e0 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109a:	f7ff fb21 	bl	80006e0 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e240      	b.n	800152e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010ac:	4b70      	ldr	r3, [pc, #448]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f0      	bne.n	800109a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d03c      	beq.n	800113e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d01c      	beq.n	8001106 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010cc:	4b68      	ldr	r3, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80010ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d2:	4a67      	ldr	r2, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fb00 	bl	80006e0 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fafc 	bl	80006e0 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e21b      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f6:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80010f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0ef      	beq.n	80010e4 <HAL_RCC_OscConfig+0x3ec>
 8001104:	e01b      	b.n	800113e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001106:	4b5a      	ldr	r3, [pc, #360]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 800110e:	f023 0301 	bic.w	r3, r3, #1
 8001112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001116:	f7ff fae3 	bl	80006e0 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111e:	f7ff fadf 	bl	80006e0 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e1fe      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001130:	4b4f      	ldr	r3, [pc, #316]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1ef      	bne.n	800111e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 80a6 	beq.w	8001298 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001150:	4b47      	ldr	r3, [pc, #284]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10d      	bne.n	8001178 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	4b44      	ldr	r3, [pc, #272]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	4a43      	ldr	r2, [pc, #268]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001166:	6593      	str	r3, [r2, #88]	; 0x58
 8001168:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001174:	2301      	movs	r3, #1
 8001176:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001178:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <HAL_RCC_OscConfig+0x57c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d118      	bne.n	80011b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001184:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <HAL_RCC_OscConfig+0x57c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a3a      	ldr	r2, [pc, #232]	; (8001274 <HAL_RCC_OscConfig+0x57c>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001190:	f7ff faa6 	bl	80006e0 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001198:	f7ff faa2 	bl	80006e0 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e1c1      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011aa:	4b32      	ldr	r3, [pc, #200]	; (8001274 <HAL_RCC_OscConfig+0x57c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_RCC_OscConfig+0x4d8>
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80011c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c4:	4a2a      	ldr	r2, [pc, #168]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ce:	e024      	b.n	800121a <HAL_RCC_OscConfig+0x522>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d110      	bne.n	80011fa <HAL_RCC_OscConfig+0x502>
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80011da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011de:	4a24      	ldr	r2, [pc, #144]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80011ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ee:	4a20      	ldr	r2, [pc, #128]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f8:	e00f      	b.n	800121a <HAL_RCC_OscConfig+0x522>
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 80011fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 800120c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001212:	f023 0304 	bic.w	r3, r3, #4
 8001216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d016      	beq.n	8001250 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001222:	f7ff fa5d 	bl	80006e0 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff fa59 	bl	80006e0 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e176      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCC_OscConfig+0x578>)
 8001242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0ed      	beq.n	800122a <HAL_RCC_OscConfig+0x532>
 800124e:	e01a      	b.n	8001286 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001250:	f7ff fa46 	bl	80006e0 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001256:	e00f      	b.n	8001278 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001258:	f7ff fa42 	bl	80006e0 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f241 3288 	movw	r2, #5000	; 0x1388
 8001266:	4293      	cmp	r3, r2
 8001268:	d906      	bls.n	8001278 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e15f      	b.n	800152e <HAL_RCC_OscConfig+0x836>
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001278:	4baa      	ldr	r3, [pc, #680]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 800127a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1e8      	bne.n	8001258 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d105      	bne.n	8001298 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800128c:	4ba5      	ldr	r3, [pc, #660]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	4aa4      	ldr	r2, [pc, #656]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 8001292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001296:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d03c      	beq.n	800131e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d01c      	beq.n	80012e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012ac:	4b9d      	ldr	r3, [pc, #628]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80012ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012b2:	4a9c      	ldr	r2, [pc, #624]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012bc:	f7ff fa10 	bl	80006e0 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012c4:	f7ff fa0c 	bl	80006e0 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e12b      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012d6:	4b93      	ldr	r3, [pc, #588]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80012d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0ef      	beq.n	80012c4 <HAL_RCC_OscConfig+0x5cc>
 80012e4:	e01b      	b.n	800131e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012e6:	4b8f      	ldr	r3, [pc, #572]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80012e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012ec:	4a8d      	ldr	r2, [pc, #564]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f6:	f7ff f9f3 	bl	80006e0 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012fe:	f7ff f9ef 	bl	80006e0 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e10e      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001310:	4b84      	ldr	r3, [pc, #528]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 8001312:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ef      	bne.n	80012fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8102 	beq.w	800152c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	2b02      	cmp	r3, #2
 800132e:	f040 80c5 	bne.w	80014bc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001332:	4b7c      	ldr	r3, [pc, #496]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f003 0203 	and.w	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	429a      	cmp	r2, r3
 8001344:	d12c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	3b01      	subs	r3, #1
 8001352:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001354:	429a      	cmp	r2, r3
 8001356:	d123      	bne.n	80013a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001364:	429a      	cmp	r2, r3
 8001366:	d11b      	bne.n	80013a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d113      	bne.n	80013a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	3b01      	subs	r3, #1
 8001386:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001388:	429a      	cmp	r2, r3
 800138a:	d109      	bne.n	80013a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	085b      	lsrs	r3, r3, #1
 8001398:	3b01      	subs	r3, #1
 800139a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800139c:	429a      	cmp	r2, r3
 800139e:	d067      	beq.n	8001470 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	d062      	beq.n	800146c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013a6:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0bb      	b.n	800152e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013b6:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a5a      	ldr	r2, [pc, #360]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80013bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013c2:	f7ff f98d 	bl	80006e0 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ca:	f7ff f989 	bl	80006e0 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e0a8      	b.n	800152e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013dc:	4b51      	ldr	r3, [pc, #324]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e8:	4b4e      	ldr	r3, [pc, #312]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <HAL_RCC_OscConfig+0x830>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013f8:	3a01      	subs	r2, #1
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	4311      	orrs	r1, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001402:	0212      	lsls	r2, r2, #8
 8001404:	4311      	orrs	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800140a:	0852      	lsrs	r2, r2, #1
 800140c:	3a01      	subs	r2, #1
 800140e:	0552      	lsls	r2, r2, #21
 8001410:	4311      	orrs	r1, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001416:	0852      	lsrs	r2, r2, #1
 8001418:	3a01      	subs	r2, #1
 800141a:	0652      	lsls	r2, r2, #25
 800141c:	4311      	orrs	r1, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001422:	06d2      	lsls	r2, r2, #27
 8001424:	430a      	orrs	r2, r1
 8001426:	493f      	ldr	r1, [pc, #252]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 8001428:	4313      	orrs	r3, r2
 800142a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800142c:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a3c      	ldr	r2, [pc, #240]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 8001432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001438:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a39      	ldr	r2, [pc, #228]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 800143e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001444:	f7ff f94c 	bl	80006e0 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff f948 	bl	80006e0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e067      	b.n	800152e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145e:	4b31      	ldr	r3, [pc, #196]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800146a:	e05f      	b.n	800152c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e05e      	b.n	800152e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d157      	bne.n	800152c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a28      	ldr	r2, [pc, #160]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 8001482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a25      	ldr	r2, [pc, #148]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 800148e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001494:	f7ff f924 	bl	80006e0 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff f920 	bl	80006e0 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e03f      	b.n	800152e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x7a4>
 80014ba:	e037      	b.n	800152c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d02d      	beq.n	800151e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80014c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014cc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d105      	bne.n	80014e6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80014e0:	f023 0303 	bic.w	r3, r3, #3
 80014e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 80014ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff f8f3 	bl	80006e0 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff f8ef 	bl	80006e0 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e00e      	b.n	800152e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <HAL_RCC_OscConfig+0x82c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x806>
 800151c:	e006      	b.n	800152c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e005      	b.n	800152e <HAL_RCC_OscConfig+0x836>
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0c8      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d910      	bls.n	800157c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0207 	bic.w	r2, r3, #7
 8001562:	4961      	ldr	r1, [pc, #388]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0b0      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d04c      	beq.n	8001622 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d121      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e09e      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d115      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e092      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e086      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	4b46      	ldr	r3, [pc, #280]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e07e      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 0203 	bic.w	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	493f      	ldr	r1, [pc, #252]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f2:	f7ff f875 	bl	80006e0 <HAL_GetTick>
 80015f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fa:	f7ff f871 	bl	80006e0 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e066      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001610:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 020c 	and.w	r2, r3, #12
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	429a      	cmp	r2, r3
 8001620:	d1eb      	bne.n	80015fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	492c      	ldr	r1, [pc, #176]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d210      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4924      	ldr	r1, [pc, #144]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e036      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4918      	ldr	r1, [pc, #96]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4910      	ldr	r1, [pc, #64]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ae:	f000 f825 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	490c      	ldr	r1, [pc, #48]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ffb4 	bl	8000640 <HAL_InitTick>
 80016d8:	4603      	mov	r3, r0
 80016da:	72fb      	strb	r3, [r7, #11]

  return status;
 80016dc:	7afb      	ldrb	r3, [r7, #11]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40022000 	.word	0x40022000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08002038 	.word	0x08002038
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x34>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d121      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d11e      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 800173e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e005      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001758:	4a2b      	ldr	r2, [pc, #172]	; (8001808 <HAL_RCC_GetSysClockFreq+0x10c>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10d      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b04      	cmp	r3, #4
 8001772:	d102      	bne.n	800177a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <HAL_RCC_GetSysClockFreq+0x110>)
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	e004      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d101      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_RCC_GetSysClockFreq+0x114>)
 8001782:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d134      	bne.n	80017f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d003      	beq.n	80017a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d003      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0xac>
 80017a0:	e005      	b.n	80017ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_GetSysClockFreq+0x110>)
 80017a4:	617b      	str	r3, [r7, #20]
      break;
 80017a6:	e005      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_GetSysClockFreq+0x114>)
 80017aa:	617b      	str	r3, [r7, #20]
      break;
 80017ac:	e002      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	617b      	str	r3, [r7, #20]
      break;
 80017b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	3301      	adds	r3, #1
 80017c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	fb02 f203 	mul.w	r2, r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	0e5b      	lsrs	r3, r3, #25
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	3301      	adds	r3, #1
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017f4:	69bb      	ldr	r3, [r7, #24]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	08002048 	.word	0x08002048
 800180c:	00f42400 	.word	0x00f42400
 8001810:	007a1200 	.word	0x007a1200

08001814 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800182c:	f7ff fa00 	bl	8000c30 <HAL_PWREx_GetVoltageRange>
 8001830:	6178      	str	r0, [r7, #20]
 8001832:	e014      	b.n	800185e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	4a24      	ldr	r2, [pc, #144]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	6593      	str	r3, [r2, #88]	; 0x58
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800184c:	f7ff f9f0 	bl	8000c30 <HAL_PWREx_GetVoltageRange>
 8001850:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001864:	d10b      	bne.n	800187e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b80      	cmp	r3, #128	; 0x80
 800186a:	d919      	bls.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2ba0      	cmp	r3, #160	; 0xa0
 8001870:	d902      	bls.n	8001878 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001872:	2302      	movs	r3, #2
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	e013      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001878:	2301      	movs	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	e010      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d902      	bls.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001884:	2303      	movs	r3, #3
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e00a      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b80      	cmp	r3, #128	; 0x80
 800188e:	d102      	bne.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001890:	2302      	movs	r3, #2
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	e004      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b70      	cmp	r3, #112	; 0x70
 800189a:	d101      	bne.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800189c:	2301      	movs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 0207 	bic.w	r2, r3, #7
 80018a8:	4909      	ldr	r1, [pc, #36]	; (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d001      	beq.n	80018c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e095      	b.n	8001a12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d108      	bne.n	8001900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018f6:	d009      	beq.n	800190c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
 80018fe:	e005      	b.n	800190c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7fe fdaa 	bl	8000480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001942:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800194c:	d902      	bls.n	8001954 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e002      	b.n	800195a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001962:	d007      	beq.n	8001974 <HAL_SPI_Init+0xa0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800196c:	d002      	beq.n	8001974 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	ea42 0103 	orr.w	r1, r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	f003 0204 	and.w	r2, r3, #4
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80019f0:	ea42 0103 	orr.w	r1, r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b088      	sub	sp, #32
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4613      	mov	r3, r2
 8001a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_SPI_Transmit+0x22>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e158      	b.n	8001cee <HAL_SPI_Transmit+0x2d4>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a44:	f7fe fe4c 	bl	80006e0 <HAL_GetTick>
 8001a48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d002      	beq.n	8001a60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a5e:	e13d      	b.n	8001cdc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_SPI_Transmit+0x52>
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a70:	e134      	b.n	8001cdc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2203      	movs	r2, #3
 8001a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	88fa      	ldrh	r2, [r7, #6]
 8001a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	88fa      	ldrh	r2, [r7, #6]
 8001a90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abc:	d10f      	bne.n	8001ade <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001acc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001adc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae8:	2b40      	cmp	r3, #64	; 0x40
 8001aea:	d007      	beq.n	8001afc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b04:	d94b      	bls.n	8001b9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_SPI_Transmit+0xfa>
 8001b0e:	8afb      	ldrh	r3, [r7, #22]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d13e      	bne.n	8001b92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	1c9a      	adds	r2, r3, #2
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b38:	e02b      	b.n	8001b92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d112      	bne.n	8001b6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	881a      	ldrh	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b58:	1c9a      	adds	r2, r3, #2
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b6c:	e011      	b.n	8001b92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b6e:	f7fe fdb7 	bl	80006e0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d803      	bhi.n	8001b86 <HAL_SPI_Transmit+0x16c>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d102      	bne.n	8001b8c <HAL_SPI_Transmit+0x172>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b90:	e0a4      	b.n	8001cdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ce      	bne.n	8001b3a <HAL_SPI_Transmit+0x120>
 8001b9c:	e07c      	b.n	8001c98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_SPI_Transmit+0x192>
 8001ba6:	8afb      	ldrh	r3, [r7, #22]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d170      	bne.n	8001c8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d912      	bls.n	8001bdc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	1c9a      	adds	r2, r3, #2
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3b02      	subs	r3, #2
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bda:	e058      	b.n	8001c8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	330c      	adds	r3, #12
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001c02:	e044      	b.n	8001c8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d12b      	bne.n	8001c6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d912      	bls.n	8001c42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c20:	881a      	ldrh	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	1c9a      	adds	r2, r3, #2
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b02      	subs	r3, #2
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c40:	e025      	b.n	8001c8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c68:	e011      	b.n	8001c8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c6a:	f7fe fd39 	bl	80006e0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d803      	bhi.n	8001c82 <HAL_SPI_Transmit+0x268>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d102      	bne.n	8001c88 <HAL_SPI_Transmit+0x26e>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c8c:	e026      	b.n	8001cdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1b5      	bne.n	8001c04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f945 	bl	8001f2c <SPI_EndRxTxTransaction>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10a      	bne.n	8001ccc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	77fb      	strb	r3, [r7, #31]
 8001cd8:	e000      	b.n	8001cdc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001cda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d08:	f7fe fcea 	bl	80006e0 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	4413      	add	r3, r2
 8001d16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d18:	f7fe fce2 	bl	80006e0 <HAL_GetTick>
 8001d1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	015b      	lsls	r3, r3, #5
 8001d24:	0d1b      	lsrs	r3, r3, #20
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d2e:	e054      	b.n	8001dda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d36:	d050      	beq.n	8001dda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d38:	f7fe fcd2 	bl	80006e0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d902      	bls.n	8001d4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d13d      	bne.n	8001dca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d66:	d111      	bne.n	8001d8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d70:	d004      	beq.n	8001d7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	d107      	bne.n	8001d8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d94:	d10f      	bne.n	8001db6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e017      	b.n	8001dfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4013      	ands	r3, r2
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d19b      	bne.n	8001d30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000

08001e08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001e16:	f7fe fc63 	bl	80006e0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e26:	f7fe fc5b 	bl	80006e0 <HAL_GetTick>
 8001e2a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001e2c:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00da      	lsls	r2, r3, #3
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	0d1b      	lsrs	r3, r3, #20
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8001e44:	e062      	b.n	8001f0c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001e4c:	d109      	bne.n	8001e62 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d106      	bne.n	8001e62 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001e60:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d050      	beq.n	8001f0c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e6a:	f7fe fc39 	bl	80006e0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d902      	bls.n	8001e80 <SPI_WaitFifoStateUntilTimeout+0x78>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d13d      	bne.n	8001efc <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e98:	d111      	bne.n	8001ebe <SPI_WaitFifoStateUntilTimeout+0xb6>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea2:	d004      	beq.n	8001eae <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	d107      	bne.n	8001ebe <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ebc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec6:	d10f      	bne.n	8001ee8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e010      	b.n	8001f1e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4013      	ands	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d194      	bne.n	8001e46 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000

08001f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7ff ff5f 	bl	8001e08 <SPI_WaitFifoStateUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e027      	b.n	8001fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2200      	movs	r2, #0
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7ff fec4 	bl	8001cf8 <SPI_WaitFlagStateUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e014      	b.n	8001fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff ff38 	bl	8001e08 <SPI_WaitFifoStateUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e000      	b.n	8001fb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <__libc_init_array>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	4d0d      	ldr	r5, [pc, #52]	; (8001ff0 <__libc_init_array+0x38>)
 8001fbc:	4c0d      	ldr	r4, [pc, #52]	; (8001ff4 <__libc_init_array+0x3c>)
 8001fbe:	1b64      	subs	r4, r4, r5
 8001fc0:	10a4      	asrs	r4, r4, #2
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	42a6      	cmp	r6, r4
 8001fc6:	d109      	bne.n	8001fdc <__libc_init_array+0x24>
 8001fc8:	4d0b      	ldr	r5, [pc, #44]	; (8001ff8 <__libc_init_array+0x40>)
 8001fca:	4c0c      	ldr	r4, [pc, #48]	; (8001ffc <__libc_init_array+0x44>)
 8001fcc:	f000 f820 	bl	8002010 <_init>
 8001fd0:	1b64      	subs	r4, r4, r5
 8001fd2:	10a4      	asrs	r4, r4, #2
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	42a6      	cmp	r6, r4
 8001fd8:	d105      	bne.n	8001fe6 <__libc_init_array+0x2e>
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe0:	4798      	blx	r3
 8001fe2:	3601      	adds	r6, #1
 8001fe4:	e7ee      	b.n	8001fc4 <__libc_init_array+0xc>
 8001fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fea:	4798      	blx	r3
 8001fec:	3601      	adds	r6, #1
 8001fee:	e7f2      	b.n	8001fd6 <__libc_init_array+0x1e>
 8001ff0:	08002078 	.word	0x08002078
 8001ff4:	08002078 	.word	0x08002078
 8001ff8:	08002078 	.word	0x08002078
 8001ffc:	0800207c 	.word	0x0800207c

08002000 <memset>:
 8002000:	4402      	add	r2, r0
 8002002:	4603      	mov	r3, r0
 8002004:	4293      	cmp	r3, r2
 8002006:	d100      	bne.n	800200a <memset+0xa>
 8002008:	4770      	bx	lr
 800200a:	f803 1b01 	strb.w	r1, [r3], #1
 800200e:	e7f9      	b.n	8002004 <memset+0x4>

08002010 <_init>:
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	bf00      	nop
 8002014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002016:	bc08      	pop	{r3}
 8002018:	469e      	mov	lr, r3
 800201a:	4770      	bx	lr

0800201c <_fini>:
 800201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201e:	bf00      	nop
 8002020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002022:	bc08      	pop	{r3}
 8002024:	469e      	mov	lr, r3
 8002026:	4770      	bx	lr
